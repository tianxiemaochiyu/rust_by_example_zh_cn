(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{571:function(t,r,n){"use strict";n.r(r);var e=n(4),a=Object(e.a)({},(function(){var t=this,r=t.$createElement,n=t._self._c||r;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"trait"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#trait"}},[t._v("#")]),t._v(" trait")]),t._v(" "),n("p",[t._v("当然 "),n("code",[t._v("trait")]),t._v(" 也可以是泛型的。我们在这里定义了一个 "),n("code",[t._v("trait")]),t._v("，它把 "),n("code",[t._v("Drop")]),t._v(" "),n("code",[t._v("trait")]),t._v("\n作为泛型方法实现了，可以 "),n("code",[t._v("drop")]),t._v("（丢弃）调用者本身和一个输入参数。")]),t._v(" "),n("div",{staticClass:"language-rust,editable extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 不可复制的类型。\nstruct Empty;\nstruct Null;\n\n// `T` 的泛型 trait。\ntrait DoubleDrop<T> {\n    // 定义一个调用者的方法，接受一个额外的参数 `T`，但不对它做任何事。\n    fn double_drop(self, _: T);\n}\n\n// 对泛型的调用者类型 `U` 和任何泛型类型 `T` 实现 `DoubleDrop<T>` 。\nimpl<T, U> DoubleDrop<T> for U {\n    // 此方法获得两个传入参数的所有权，并释放它们。\n    fn double_drop(self, _: T) {}\n}\n\nfn main() {\n    let empty = Empty;\n    let null  = Null;\n\n    // 释放 `empty` 和 `null`。\n    empty.double_drop(null);\n\n    //empty;\n    //null;\n    // ^ 试一试：去掉这两行的注释。\n}\n")])])]),n("h3",{attrs:{id:"参见："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参见："}},[t._v("#")]),t._v(" 参见：")]),t._v(" "),n("p",[n("a",{attrs:{href:"http://doc.rust-lang.org/std/ops/trait.Drop.html",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("Drop")]),n("OutboundLink")],1),t._v(", "),n("RouterLink",{attrs:{to:"/custom_types/structs.html"}},[n("code",[t._v("struct")])]),t._v(", 和 "),n("RouterLink",{attrs:{to:"/trait.html"}},[n("code",[t._v("trait")])])],1)])}),[],!1,null,null,null);r.default=a.exports}}]);