(window.webpackJsonp=window.webpackJsonp||[]).push([[126],{604:function(n,t,e){"use strict";e.r(t);var a=e(4),l=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"元组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元组"}},[n._v("#")]),n._v(" 元组")]),n._v(" "),e("p",[n._v("元组是一个可以包含各种类型的值的组合。元组使用括号 "),e("code",[n._v("()")]),n._v(" 来构成（construct），而\n每个元组自身又是一个类型标记为 "),e("code",[n._v("(T1, T2, ...)")]),n._v(" 的值，其中 "),e("code",[n._v("T1")]),n._v("、"),e("code",[n._v("T2")]),n._v(" 是每个元素\n的类型。函数可以使用元组来返回多个值，因为元组可以拥有任意多的值。")]),n._v(" "),e("div",{staticClass:"language-rust,editable extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 元组可以充当函数的参数和返回值\nfn reverse(pair: (i32, bool)) -> (bool, i32) {\n    // 可以使用 `let` 把一个元组的成员绑定到一些变量\n    let (integer, boolean) = pair;\n\n    (boolean, integer)\n}\n\n// 在 “动手试一试” 的练习中要用到下面这个结构体。\n#[derive(Debug)]\nstruct Matrix(f32, f32, f32, f32);\n\nfn main() {\n    // 包含各种不同类型的元组\n    let long_tuple = (1u8, 2u16, 3u32, 4u64,\n                      -1i8, -2i16, -3i32, -4i64,\n                      0.1f32, 0.2f64,\n                      \'a\', true);\n\n    // 通过元组的下标来访问具体的值\n    println!("long tuple first value: {}", long_tuple.0);\n    println!("long tuple second value: {}", long_tuple.1);\n\n    // 元组也可以充当元组的元素\n    let tuple_of_tuples = ((1u8, 2u16, 2u32), (4u64, -1i8), -2i16);\n\n    // 元组可以打印\n    println!("tuple of tuples: {:?}", tuple_of_tuples);\n    \n    // 但很长的元组无法打印\n    // let too_long_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);\n    // println!("too long tuple: {:?}", too_long_tuple);\n    // 试一试 ^ 取消上面两行的注释，阅读编译器给出的错误信息。\n    \n    let pair = (1, true);\n    println!("pair is {:?}", pair);\n\n    println!("the reversed pair is {:?}", reverse(pair));\n\n    // 创建单元素元组需要一个额外的逗号，这是为了和被括号包含的字面量作区分。\n    println!("one element tuple: {:?}", (5u32,));\n    println!("just an integer: {:?}", (5u32));\n\n    // 元组可以被解构（deconstruct），从而将值绑定给变量\n    let tuple = (1, "hello", 4.5, true);\n\n    let (a, b, c, d) = tuple;\n    println!("{:?}, {:?}, {:?}, {:?}", a, b, c, d);\n\n    let matrix = Matrix(1.1, 1.2, 2.1, 2.2);\n    println!("{:?}", matrix)\n\n}\n')])])]),e("h3",{attrs:{id:"动手试一试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#动手试一试"}},[n._v("#")]),n._v(" 动手试一试")]),n._v(" "),e("ol",[e("li",[e("p",[e("strong",[n._v("复习")]),n._v("：在上面的例子中给 Matrix "),e("code",[n._v("结构体")]),n._v(" 加上 "),e("code",[n._v("fmt::Display")]),n._v(" trait，这样当\n你从 Debug 格式化 "),e("code",[n._v("{:?}")]),n._v(" 切换到 Display 格式化 "),e("code",[n._v("{}")]),n._v(" 时，会得到如下的输出：")]),n._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("( 1.1 1.2 )\n( 2.1 2.2 )\n")])])]),e("p",[n._v("可以回顾之前学过的"),e("RouterLink",{attrs:{to:"/hello/print/print_display.html"}},[n._v("显示（display）")]),n._v("的例子。")],1)]),n._v(" "),e("li",[e("p",[n._v("以 "),e("code",[n._v("reverse")]),n._v(" 函数作为样板，写一个 "),e("code",[n._v("transpose")]),n._v(" 函数，它可以接受一个 Matrix\n作为参数，并返回一个右上 - 左下对角线上的两元素交换后的 Matrix。举个例子：")]),n._v(" "),e("div",{staticClass:"language-rust,ignore extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('println!("Matrix:\\n{}", matrix);\nprintln!("Transpose:\\n{}", transpose(matrix));\n')])])]),e("p",[n._v("输出结果：")]),n._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("Matrix:\n( 1.1 1.2 )\n( 2.1 2.2 )\nTranspose:\n( 1.1 2.1 )\n( 1.2 2.2 )\n")])])])])])])}),[],!1,null,null,null);t.default=l.exports}}]);