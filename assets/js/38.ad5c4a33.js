(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{517:function(e,t,s){"use strict";s.r(t);var r=s(4),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"遍历-result"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历-result"}},[e._v("#")]),e._v(" 遍历 "),s("code",[e._v("Result")])]),e._v(" "),s("p",[s("code",[e._v("Iter::map")]),e._v(" 操作可能失败，比如：")]),e._v(" "),s("div",{staticClass:"language-rust,editable extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('fn main() {\n    let strings = vec!["tofu", "93", "18"];\n    let possible_numbers: Vec<_> = strings\n        .into_iter()\n        .map(|s| s.parse::<i32>())\n        .collect();\n    println!("Results: {:?}", possible_numbers);\n}\n')])])]),s("p",[e._v("我们来看一些处理这种问题的策略：")]),e._v(" "),s("h2",{attrs:{id:"使用-filter-map-忽略失败的项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-filter-map-忽略失败的项"}},[e._v("#")]),e._v(" 使用 "),s("code",[e._v("filter_map()")]),e._v(" 忽略失败的项")]),e._v(" "),s("p",[s("code",[e._v("filter_map")]),e._v(" 会调用一个函数，过滤掉为 "),s("code",[e._v("None")]),e._v(" 的所有结果。")]),e._v(" "),s("div",{staticClass:"language-rust,editable extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('fn main() {\n    let strings = vec!["tofu", "93", "18"];\n    let numbers: Vec<_> = strings\n        .into_iter()\n        .map(|s| s.parse::<i32>())\n        .filter_map(Result::ok)\n        .collect();\n    println!("Results: {:?}", numbers);\n}\n')])])]),s("h2",{attrs:{id:"使用-collect-使整个操作失败"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-collect-使整个操作失败"}},[e._v("#")]),e._v(" 使用 "),s("code",[e._v("collect()")]),e._v(" 使整个操作失败")]),e._v(" "),s("p",[s("code",[e._v("Result")]),e._v(" 实现了 "),s("code",[e._v("FromIter")]),e._v("，因此结果的向量（"),s("code",[e._v("Vec<Result<T, E>>")]),e._v("）可以被转换成\n结果包裹着向量（"),s("code",[e._v("Result<Vec<T>, E>")]),e._v("）。一旦找到一个 "),s("code",[e._v("Result::Err")]),e._v(" ，遍历就被终止。")]),e._v(" "),s("div",{staticClass:"language-rust,editable extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('fn main() {\n    let strings = vec!["tofu", "93", "18"];\n    let numbers: Result<Vec<_>, _> = strings\n        .into_iter()\n        .map(|s| s.parse::<i32>())\n        .collect();\n    println!("Results: {:?}", numbers);\n}\n')])])]),s("p",[e._v("同样的技巧可以对 "),s("code",[e._v("Option")]),e._v(" 使用。")]),e._v(" "),s("h2",{attrs:{id:"使用-partition-收集所有合法的值与错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-partition-收集所有合法的值与错误"}},[e._v("#")]),e._v(" 使用 "),s("code",[e._v("Partition()")]),e._v(" 收集所有合法的值与错误")]),e._v(" "),s("div",{staticClass:"language-rust,editable extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('fn main() {\n    let strings = vec!["tofu", "93", "18"];\n    let (numbers, errors): (Vec<_>, Vec<_>) = strings\n        .into_iter()\n        .map(|s| s.parse::<i32>())\n        .partition(Result::is_ok);\n    println!("Numbers: {:?}", numbers);\n    println!("Errors: {:?}", errors);\n}\n')])])]),s("p",[e._v("当你看着这些结果时，你会发现所有东西还在 "),s("code",[e._v("Result")]),e._v(" 中保存着。要取出它们，需要一些\n模板化的代码。")]),e._v(" "),s("div",{staticClass:"language-rust,editable extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('fn main() {\n    let strings = vec!["tofu", "93", "18"];\n    let (numbers, errors): (Vec<_>, Vec<_>) = strings\n        .into_iter()\n        .map(|s| s.parse::<i32>())\n        .partition(Result::is_ok);\n    let numbers: Vec<_> = numbers.into_iter().map(Result::unwrap).collect();\n    let errors: Vec<_> = errors.into_iter().map(Result::unwrap_err).collect();\n    println!("Numbers: {:?}", numbers);\n    println!("Errors: {:?}", errors);\n}\n')])])])])}),[],!1,null,null,null);t.default=n.exports}}]);