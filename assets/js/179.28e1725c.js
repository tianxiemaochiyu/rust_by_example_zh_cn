(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{657:function(n,e,t){"use strict";t.r(e);var a=t(4),s=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"特性-trait"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特性-trait"}},[n._v("#")]),n._v(" 特性 trait")]),n._v(" "),t("p",[t("code",[n._v("trait")]),n._v(" 是对未知类型 "),t("code",[n._v("Self")]),n._v(" 定义的方法集。该类型也可以访问同一个 trait 中定义的\n其他方法。")]),n._v(" "),t("p",[n._v("对任何数据类型都可以实现 trait。在下面例子中，我们定义了包含一系列方法\n的 "),t("code",[n._v("Animal")]),n._v("。然后针对 "),t("code",[n._v("Sheep")]),n._v(" 数据类型实现 "),t("code",[n._v("Animal")]),n._v(" "),t("code",[n._v("trait")]),n._v("，因而 "),t("code",[n._v("Sheep")]),n._v("\n的实例可以使用 "),t("code",[n._v("Animal")]),n._v(" 中的所有方法。")]),n._v(" "),t("div",{staticClass:"language-rust,editable extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('struct Sheep { naked: bool, name: &\'static str }\n\ntrait Animal {\n    // 静态方法签名；`Self` 表示实现者类型（implementor type）。\n    fn new(name: &\'static str) -> Self;\n\n    // 实例方法签名；这些方法将返回一个字符串。\n    fn name(&self) -> &\'static str;\n    fn noise(&self) -> &\'static str;\n\n    // trait 可以提供默认的方法定义。\n    fn talk(&self) {\n        println!("{} says {}", self.name(), self.noise());\n    }\n}\n\nimpl Sheep {\n    fn is_naked(&self) -> bool {\n        self.naked\n    }\n\n    fn shear(&mut self) {\n        if self.is_naked() {\n            // 实现者可以使用它的 trait 方法。\n            println!("{} is already naked...", self.name());\n        } else {\n            println!("{} gets a haircut!", self.name);\n\n            self.naked = true;\n        }\n    }\n}\n\n// 对 `Sheep` 实现 `Animal` trait。\nimpl Animal for Sheep {\n    // `Self` 是实现者类型：`Sheep`。\n    fn new(name: &\'static str) -> Sheep {\n        Sheep { name: name, naked: false }\n    }\n\n    fn name(&self) -> &\'static str {\n        self.name\n    }\n\n    fn noise(&self) -> &\'static str {\n        if self.is_naked() {\n            "baaaaah?"\n        } else {\n            "baaaaah!"\n        }\n    }\n    \n    // 默认 trait 方法可以重载。\n    fn talk(&self) {\n        // 例如我们可以增加一些安静的沉思。\n        println!("{} pauses briefly... {}", self.name, self.noise());\n    }\n}\n\nfn main() {\n    // 这种情况需要类型标注。\n    let mut dolly: Sheep = Animal::new("Dolly");\n    // 试一试 ^ 移除类型标注。\n\n    dolly.talk();\n    dolly.shear();\n    dolly.talk();\n}\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);