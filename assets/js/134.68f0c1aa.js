(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{613:function(n,t,e){"use strict";e.r(t);var a=e(4),i=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"省略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#省略"}},[n._v("#")]),n._v(" 省略")]),n._v(" "),e("p",[n._v("有些生命周期的模式太常用了，所以借用检查器将会隐式地添加它们以减少程序输入量\n和增强可读性。这种隐式添加生命周期的过程称为省略（elision）。在 Rust 使用省略\n仅仅是因为这些模式太普遍了。")]),n._v(" "),e("p",[n._v("下面代码展示了一些省略的例子。对于省略的详细描述，可以参考官方文档的"),e("a",{attrs:{href:"http://doc.rust-lang.org/book/lifetimes.html#lifetime-elision",target:"_blank",rel:"noopener noreferrer"}},[n._v("生命周期省略"),e("OutboundLink")],1),n._v("。")]),n._v(" "),e("div",{staticClass:"language-rust,editable extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// `elided_input` 和 `annotated_input` 事实上拥有相同的签名，\n// `elided_input` 的生命周期会被编译器自动添加：\nfn elided_input(x: &i32) {\n    println!("`elided_input`: {}", x)\n}\n\nfn annotated_input<\'a>(x: &\'a i32) {\n    println!("`annotated_input`: {}", x)\n}\n\n// 类似地，`elided_pass` 和 `annotated_pass` 也拥有相同的签名，\n// 生命周期会被隐式地添加进 `elided_pass`：\nfn elided_pass(x: &i32) -> &i32 { x }\n\nfn annotated_pass<\'a>(x: &\'a i32) -> &\'a i32 { x }\n\nfn main() {\n    let x = 3;\n    \n    elided_input(&x);\n    annotated_input(&x);\n\n    println!("`elided_pass`: {}", elided_pass(&x));\n    println!("`annotated_pass`: {}", annotated_pass(&x));\n}\n')])])]),e("h3",{attrs:{id:"参见："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参见："}},[n._v("#")]),n._v(" 参见：")]),n._v(" "),e("p",[e("a",{attrs:{href:"http://doc.rust-lang.org/book/lifetimes.html#lifetime-elision",target:"_blank",rel:"noopener noreferrer"}},[n._v("省略"),e("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=i.exports}}]);