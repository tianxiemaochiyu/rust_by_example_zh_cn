(window.webpackJsonp=window.webpackJsonp||[]).push([[169],{646:function(t,s,e){"use strict";e.r(s);var n=e(4),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"子进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#子进程"}},[t._v("#")]),t._v(" 子进程")]),t._v(" "),e("p",[e("code",[t._v("process::Output")]),t._v(" 结构体表示已结束的子进程（child process）的输出，而\n"),e("code",[t._v("process::Command")]),t._v(" 结构体是一个进程创建者（process builder）。")]),t._v(" "),e("div",{staticClass:"language-rust,editable extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('use std::process::Command;\n\nfn main() {\n    let output = Command::new("rustc")\n        .arg("--version")\n        .output().unwrap_or_else(|e| {\n            panic!("failed to execute process: {}", e)\n    });\n\n    if output.status.success() {\n        let s = String::from_utf8_lossy(&output.stdout);\n\n        print!("rustc succeeded and stdout was:\\n{}", s);\n    } else {\n        let s = String::from_utf8_lossy(&output.stderr);\n\n        print!("rustc failed and stderr was:\\n{}", s);\n    }\n}\n')])])]),e("p",[t._v("（再试试上面的例子，给 "),e("code",[t._v("rustc")]),t._v(" 命令传入一个错误的 flag）")])])}),[],!1,null,null,null);s.default=r.exports}}]);