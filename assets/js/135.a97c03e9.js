(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{615:function(n,t,a){"use strict";a.r(t);var e=a(4),r=Object(e.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"显式标注"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显式标注"}},[n._v("#")]),n._v(" 显式标注")]),n._v(" "),a("p",[n._v("借用检查器使用显式的生命周期标记来明确引用的有效时间应该持续多久。在生命周期没有\n省略[^1]的情况下，Rust 需要显式标注来确定引用的生命周期应该是什么样的。可以用撇号\n显式地标出生命周期，语法如下：")]),n._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("foo<'a>\n// `foo` 带有一个生命周期参数 `'a`\n")])])]),a("p",[n._v("和"),a("RouterLink",{attrs:{to:"/fn/closures/anonymity.html"}},[n._v("闭包")]),n._v("类似，使用生命周期需要泛型。另外这个生命周期的语法也表明\n了 "),a("code",[n._v("foo")]),n._v(" 的生命周期不能超出 "),a("code",[n._v("'a")]),n._v(" 的周期。若要给类型显式地标注生命周期，其语法\n会像是 "),a("code",[n._v("&'a T")]),n._v(" 这样，其中 "),a("code",[n._v("'a")]),n._v(" 的作用刚刚已经介绍了。")],1),n._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("foo<'a, 'b>\n// `foo` 带有生命周期参数 `'a` 和 `'b`\n")])])]),a("p",[n._v("在上面这种情形中，"),a("code",[n._v("foo")]),n._v(" 的生命周期不能超出 "),a("code",[n._v("'a")]),n._v(" 和 "),a("code",[n._v("'b")]),n._v(" 中任一个的周期。")]),n._v(" "),a("p",[n._v("看下面的例子，了解显式生命周期标注的运用：")]),n._v(" "),a("div",{staticClass:"language-rust,editable,ignore,mdbook-runnable extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// `print_refs` 接受两个 `i32` 的引用，它们有不同的生命周期 `'a` 和 `'b`。\n// 这两个生命周期都必须至少要和 `print_refs` 函数一样长。\nfn print_refs<'a, 'b>(x: &'a i32, y: &'b i32) {\n    println!(\"x is {} and y is {}\", x, y);\n}\n\n// 不带参数的函数，不过有一个生命周期参数 `'a`。\nfn failed_borrow<'a>() {\n    let _x = 12;\n\n    // 报错：`_x` 的生命周期不够长\n    //let y: &'a i32 = &_x;\n    // 在函数内部使用生命周期 `'a` 作为显式类型标注将导致失败，因为 `&_x` 的\n    // 生命周期比 `y` 的短。短生命周期不能强制转换成长生命周期。\n}\n\nfn main() {\n    // 创建变量，稍后用于借用。\n    let (four, nine) = (4, 9);\n    \n    // 两个变量的借用（`&`）都传进函数。\n    print_refs(&four, &nine);\n    // 任何被借用的输入量都必须比借用者生存得更长。\n    // 也就是说，`four` 和 `nine` 的生命周期都必须比 `print_refs` 的长。\n    \n    failed_borrow();\n    // `failed_borrow` 未包含引用，因此不要求 `'a` 长于函数的生命周期，\n    // 但 `'a` 寿命确实更长。因为该生命周期从未被约束，所以默认为 `'static`。\n}\n")])])]),a("p",[n._v("[^1]: "),a("RouterLink",{attrs:{to:"/scope/lifetime/elision.html"}},[n._v("省略")]),n._v(" 隐式地标注了生命周期，所以情况不同。")],1),n._v(" "),a("h3",{attrs:{id:"参见："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参见："}},[n._v("#")]),n._v(" 参见：")]),n._v(" "),a("p",[a("RouterLink",{attrs:{to:"/generics.html"}},[n._v("泛型")]),n._v(" 和 "),a("RouterLink",{attrs:{to:"/fn/closures.html"}},[n._v("闭包")])],1)])}),[],!1,null,null,null);t.default=r.exports}}]);