(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{568:function(n,t,s){"use strict";s.r(t);var a=s(4),e=Object(a.a)({},(function(){var n=this,t=n.$createElement,s=n._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"关联类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关联类型"}},[n._v("#")]),n._v(" 关联类型")]),n._v(" "),s("p",[n._v("通过把容器内部的类型放到 "),s("code",[n._v("trait")]),n._v(" 中作为"),s("strong",[n._v("输出类型")]),n._v("，使用 “关联类型” 增加了代码\n的可读性。这样的 "),s("code",[n._v("trait")]),n._v(" 的定义语法如下：")]),n._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// `A` 和 `B` 在 trait 里面通过 `type` 关键字来定义。")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// （注意：此处的 `type` 不同于为类型取别名时的 `type`）。")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("trait")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Contains")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("type")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("type")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 这种语法能够泛型地表示这些新类型。")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("fn")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[n._v("contains")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("&")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("&")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("Self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("::")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("&")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("Self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("::")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("->")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("bool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])])]),s("p",[n._v("注意使用了 "),s("code",[n._v("Contains")]),n._v(" "),s("code",[n._v("trait")]),n._v(" 的函数就不需要写出 "),s("code",[n._v("A")]),n._v(" 或 "),s("code",[n._v("B")]),n._v(" 了：")]),n._v(" "),s("div",{staticClass:"language-rust,ignore extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 不使用关联类型\nfn difference<A, B, C>(container: &C) -> i32 where\n    C: Contains<A, B> { ... }\n\n// 使用关联类型\nfn difference<C: Contains>(container: &C) -> i32 { ... }\n")])])]),s("p",[n._v("让我们使用关联类型来重写上一小节的例子：")]),n._v(" "),s("div",{staticClass:"language-rust,editable extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('struct Container(i32, i32);\n\n// 这个 trait 检查给定的 2 个项是否储存于容器中\n// 并且能够获得容器的第一个或最后一个值。\ntrait Contains {\n    // 在这里定义可以被方法使用的泛型类型。\n    type A;\n    type B;\n\n    fn contains(&self, _: &Self::A, _: &Self::B) -> bool;\n    fn first(&self) -> i32;\n    fn last(&self) -> i32;\n}\n\nimpl Contains for Container {\n    // 指出 `A` 和 `B` 是什么类型。如果 `input`（输入）类型\n    // 为 `Container(i32, i32)`，那么 `output`（输出）类型\n    // 会被确定为 `i32` 和 `i32`。\n    type A = i32;\n    type B = i32;\n\n    // `&Self::A` 和 `&Self::B` 在这里也是合法的类型。\n    fn contains(&self, number_1: &i32, number_2: &i32) -> bool {\n        (&self.0 == number_1) && (&self.1 == number_2)\n    }\n\n    // 得到第一个数字。\n    fn first(&self) -> i32 { self.0 }\n\n    // 得到最后一个数字。\n    fn last(&self) -> i32 { self.1 }\n}\n\nfn difference<C: Contains>(container: &C) -> i32 {\n    container.last() - container.first()\n}\n\nfn main() {\n    let number_1 = 3;\n    let number_2 = 10;\n\n    let container = Container(number_1, number_2);\n\n    println!("Does container contain {} and {}: {}",\n        &number_1, &number_2,\n        container.contains(&number_1, &number_2));\n    println!("First number: {}", container.first());\n    println!("Last number: {}", container.last());\n    \n    println!("The difference is: {}", difference(&container));\n}\n')])])])])}),[],!1,null,null,null);t.default=e.exports}}]);