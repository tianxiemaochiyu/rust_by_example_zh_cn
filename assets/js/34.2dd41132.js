(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{516:function(n,t,e){"use strict";e.r(t);var a=e(4),o=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"使用-use"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-use"}},[n._v("#")]),n._v(" 使用 use")]),n._v(" "),e("p",[n._v("使用 "),e("code",[n._v("use")]),n._v(" 声明的话，就可以不写出名称的完整路径了：")]),n._v(" "),e("div",{staticClass:"language-rust,editable extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 该属性用于隐藏对未使用代码的警告。\n#![allow(dead_code)]\n\nenum Status {\n    Rich,\n    Poor,\n}\n\nenum Work {\n    Civilian,\n    Soldier,\n}\n\nfn main() {\n    // 显式地 `use` 各个名称使他们直接可用，而不需要指定它们来自 `Status`。\n    use Status::{Poor, Rich};\n    // 自动地 `use` `Work` 内部的各个名称。\n    use Work::*;\n\n    // `Poor` 等价于 `Status::Poor`。\n    let status = Poor;\n    // `Civilian` 等价于 `Work::Civilian`。\n    let work = Civilian;\n\n    match status {\n        // 注意这里没有用完整路径，因为上面显式地使用了 `use`。\n        Rich => println!("The rich have lots of money!"),\n        Poor => println!("The poor have no money..."),\n    }\n\n    match work {\n        // 再次注意到没有用完整路径。\n        Civilian => println!("Civilians work!"),\n        Soldier  => println!("Soldiers fight!"),\n    }\n}\n')])])]),e("h3",{attrs:{id:"参见："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参见："}},[n._v("#")]),n._v(" 参见：")]),n._v(" "),e("p",[e("RouterLink",{attrs:{to:"/flow_control/match.html"}},[e("code",[n._v("match")])]),n._v(" 和 "),e("RouterLink",{attrs:{to:"/mod/use.html"}},[e("code",[n._v("use")])])],1)])}),[],!1,null,null,null);t.default=o.exports}}]);