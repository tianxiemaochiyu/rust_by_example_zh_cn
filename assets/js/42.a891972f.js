(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{520:function(t,e,n){"use strict";n.r(e);var r=n(4),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"从-option-中取出-result"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#从-option-中取出-result"}},[t._v("#")]),t._v(" 从 "),n("code",[t._v("Option")]),t._v(" 中取出 "),n("code",[t._v("Result")])]),t._v(" "),n("p",[t._v("处理混合错误类型的最基本的手段就是让它们互相包含。")]),t._v(" "),n("div",{staticClass:"language-rust,editable extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('use std::num::ParseIntError;\n\nfn double_first(vec: Vec<&str>) -> Option<Result<i32, ParseIntError>> {\n    vec.first().map(|first| {\n        first.parse::<i32>().map(|n| 2 * n)\n    })\n}\n\nfn main() {\n    let numbers = vec!["42", "93", "18"];\n    let empty = vec![];\n    let strings = vec!["tofu", "93", "18"];\n\n    println!("The first doubled is {:?}", double_first(numbers));\n\n    println!("The first doubled is {:?}", double_first(empty));\n    // Error 1: the input vector is empty\n\n    println!("The first doubled is {:?}", double_first(strings));\n    // Error 2: the element doesn\'t parse to a number\n}\n')])])]),n("p",[t._v("有时候我们不想再处理错误（比如使用 "),n("RouterLink",{attrs:{to:"/error/result/enter_question_mark.html"}},[n("code",[t._v("?")])]),t._v(" 的时候），但如果\n"),n("code",[t._v("Option")]),t._v(" 是 "),n("code",[t._v("None")]),t._v(" 则继续处理错误。一些组合算子可以让我们轻松地交换 "),n("code",[t._v("Result")]),t._v(" 和\n"),n("code",[t._v("Option")]),t._v("。")],1),t._v(" "),n("div",{staticClass:"language-rust,editable extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('use std::num::ParseIntError;\n\nfn double_first(vec: Vec<&str>) -> Result<Option<i32>, ParseIntError> {\n    let opt = vec.first().map(|first| {\n        first.parse::<i32>().map(|n| 2 * n)\n    });\n\n    opt.map_or(Ok(None), |r| r.map(Some))\n}\n\nfn main() {\n    let numbers = vec!["42", "93", "18"];\n    let empty = vec![];\n    let strings = vec!["tofu", "93", "18"];\n\n    println!("The first doubled is {:?}", double_first(numbers));\n    println!("The first doubled is {:?}", double_first(empty));\n    println!("The first doubled is {:?}", double_first(strings));\n}\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);