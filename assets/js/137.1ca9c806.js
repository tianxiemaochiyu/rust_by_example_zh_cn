(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{614:function(t,e,n){"use strict";n.r(e);var r=n(4),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"约束"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#约束"}},[t._v("#")]),t._v(" 约束")]),t._v(" "),n("p",[t._v("就如泛型类型能够被约束一样，生命周期（它们本身就是泛型）也可以使用约束。"),n("code",[t._v(":")]),t._v(" 字符\n的意义在这里稍微有些不同，不过 "),n("code",[t._v("+")]),t._v(" 是相同的。注意下面的说明：")]),t._v(" "),n("ol",[n("li",[n("code",[t._v("T: 'a")]),t._v("：在 "),n("code",[t._v("T")]),t._v(" 中的"),n("strong",[t._v("所有")]),t._v("引用都必须比生命周期 "),n("code",[t._v("'a")]),t._v(" 活得更长。")]),t._v(" "),n("li",[n("code",[t._v("T: Trait + 'a")]),t._v("："),n("code",[t._v("T")]),t._v(" 类型必须实现 "),n("code",[t._v("Trait")]),t._v(" trait，并且在 "),n("code",[t._v("T")]),t._v(" 中的"),n("strong",[t._v("所有")]),t._v("引用\n都必须比 "),n("code",[t._v("'a")]),t._v(" 活得更长。")])]),t._v(" "),n("p",[t._v("下面例子展示了上述语法的实际应用：")]),t._v(" "),n("div",{staticClass:"language-rust,editable extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("use std::fmt::Debug; // 用于约束的 trait。\n\n#[derive(Debug)]\nstruct Ref<'a, T: 'a>(&'a T);\n// `Ref` 包含一个指向泛型类型 `T` 的引用，其中 `T` 拥有一个未知的生命周期\n// `'a`。`T` 拥有生命周期限制， `T` 中的任何*引用*都必须比 `'a` 活得更长。另外\n// `Ref` 的生命周期也不能超出 `'a`。\n\n// 一个泛型函数，使用 `Debug` trait 来打印内容。\nfn print<T>(t: T) where\n    T: Debug {\n    println!(\"`print`: t is {:?}\", t);\n}\n\n// 这里接受一个指向 `T` 的引用，其中 `T` 实现了 `Debug` trait，并且在 `T` 中的\n// 所有*引用*都必须比 `'a'` 存活时间更长。另外，`'a` 也要比函数活得更长。\nfn print_ref<'a, T>(t: &'a T) where\n    T: Debug + 'a {\n    println!(\"`print_ref`: t is {:?}\", t);\n}\n\nfn main() {\n    let x = 7;\n    let ref_x = Ref(&x);\n\n    print_ref(&ref_x);\n    print(ref_x);\n}\n")])])]),n("h3",{attrs:{id:"参见："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参见："}},[t._v("#")]),t._v(" 参见：")]),t._v(" "),n("p",[n("RouterLink",{attrs:{to:"/generics.html"}},[t._v("泛型")]),t._v(", "),n("RouterLink",{attrs:{to:"/generics/bounds.html"}},[t._v("泛型中的约束")]),t._v(", 以及\n"),n("RouterLink",{attrs:{to:"/generics/multi_bounds.html"}},[t._v("泛型中的多重约束")])],1)])}),[],!1,null,null,null);e.default=a.exports}}]);