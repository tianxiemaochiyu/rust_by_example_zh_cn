(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{494:function(n,e,t){"use strict";t.r(e);var a=t(4),d=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"死代码-dead-code"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#死代码-dead-code"}},[n._v("#")]),n._v(" 死代码 "),t("code",[n._v("dead_code")])]),n._v(" "),t("p",[n._v("编译器提供了 "),t("code",[n._v("dead_code")]),n._v("（死代码，无效代码）"),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Lint_%28software%29",target:"_blank",rel:"noopener noreferrer"}},[t("em",[n._v("lint")]),t("OutboundLink")],1),n._v("，这会对未使用的函数\n产生警告。可以用一个"),t("strong",[n._v("属性")]),n._v("来禁用这个 lint。")]),n._v(" "),t("div",{staticClass:"language-rust,editable extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("fn used_function() {}\n\n// `#[allow(dead_code)]` 属性可以禁用 `dead_code` lint\n#[allow(dead_code)]\nfn unused_function() {}\n\nfn noisy_unused_function() {}\n// 改正 ^ 增加一个属性来消除警告\n\nfn main() {\n    used_function();\n}\n")])])]),t("p",[n._v("注意在实际程序中，需要将死代码清除掉。由于本书的例子是交互性的，因而其中需要\n允许一些死代码的出现。")])])}),[],!1,null,null,null);e.default=d.exports}}]);