(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{594:function(e,a,t){"use strict";t.r(a);var n=t(4),l=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"可变参数接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可变参数接口"}},[e._v("#")]),e._v(" 可变参数接口")]),e._v(" "),t("p",[e._v("可变参数接口可以接受任意数目的参数。比如说 "),t("code",[e._v("println")]),e._v(" 就可以，其参数的数目是由\n格式化字符串指定的。")]),e._v(" "),t("p",[e._v("我们可以把之前的 "),t("code",[e._v("calculater!")]),e._v(" 宏改写成可变参数接口：")]),e._v(" "),t("div",{staticClass:"language-rust,editable extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('macro_rules! calculate {\n    // 单个 `eval` 的模式\n    (eval $e:expr) => {{\n        {\n            let val: usize = $e; // Force types to be integers\n            println!("{} = {}", stringify!{$e}, val);\n        }\n    }};\n\n    // 递归地拆解多重的 `eval`\n    (eval $e:expr, $(eval $es:expr),+) => {{\n        calculate! { eval $e }\n        calculate! { $(eval $es),+ }\n    }};\n}\n\nfn main() {\n    calculate! { // 妈妈快看，可变参数的 `calculate!`！\n        eval 1 + 2,\n        eval 3 + 4,\n        eval (2 * 3) + 1\n    }\n}\n')])])]),t("p",[e._v("输出：")]),e._v(" "),t("div",{staticClass:"language-txt extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("1 + 2 = 3\n3 + 4 = 7\n(2 * 3) + 1 = 7\n")])])])])}),[],!1,null,null,null);a.default=l.exports}}]);