(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{506:function(t,s,r){"use strict";r.r(s);var n=r(4),a=Object(n.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"tostring-和-fromstr"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tostring-和-fromstr"}},[t._v("#")]),t._v(" "),r("code",[t._v("ToString")]),t._v(" 和 "),r("code",[t._v("FromStr")])]),t._v(" "),r("h2",{attrs:{id:"tostring"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tostring"}},[t._v("#")]),t._v(" "),r("code",[t._v("ToString")])]),t._v(" "),r("p",[t._v("要把任何类型转换成 "),r("code",[t._v("String")]),t._v("，只需要实现那个类型的 "),r("a",{attrs:{href:"https://doc.rust-lang.org/std/string/trait.ToString.html",target:"_blank",rel:"noopener noreferrer"}},[r("code",[t._v("ToString")]),r("OutboundLink")],1),t._v(" trait。然而不要直接这么做，您应该实现"),r("a",{attrs:{href:"https://doc.rust-lang.org/std/fmt/trait.Display.html",target:"_blank",rel:"noopener noreferrer"}},[r("code",[t._v("fmt::Display")]),r("OutboundLink")],1),t._v(" trait，它会自动提供 "),r("a",{attrs:{href:"https://doc.rust-lang.org/std/string/trait.ToString.html",target:"_blank",rel:"noopener noreferrer"}},[r("code",[t._v("ToString")]),r("OutboundLink")],1),t._v("，并且还可以用来打印类型，就像 "),r("RouterLink",{attrs:{to:"/hello/print.html"}},[r("code",[t._v("print!")])]),t._v(" 一节中讨论的那样。")],1),t._v(" "),r("div",{staticClass:"language-rust,editable extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('use std::string::ToString;\n\nstruct Circle {\n    radius: i32\n}\n\nimpl ToString for Circle {\n    fn to_string(&self) -> String {\n        format!("Circle of radius {:?}", self.radius)\n    }\n}\n\nfn main() {\n    let circle = Circle { radius: 6 };\n    println!("{}", circle.to_string());\n}\n')])])]),r("h2",{attrs:{id:"解析字符串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解析字符串"}},[t._v("#")]),t._v(" 解析字符串")]),t._v(" "),r("p",[t._v("我们经常需要把字符串转成数字。完成这项工作的标准手段是用 "),r("a",{attrs:{href:"https://doc.rust-lang.org/std/primitive.str.html#method.parse",target:"_blank",rel:"noopener noreferrer"}},[r("code",[t._v("parse")]),r("OutboundLink")],1),t._v(" 函数。我们得\n提供要转换到的类型，这可以通过不使用类型推断，或者用 “涡轮鱼” 语法（turbo\nfish，"),r("code",[t._v("<>")]),t._v("）实现。")]),t._v(" "),r("p",[t._v("只要对目标类型实现了 "),r("a",{attrs:{href:"https://doc.rust-lang.org/std/str/trait.FromStr.html",target:"_blank",rel:"noopener noreferrer"}},[r("code",[t._v("FromStr")]),r("OutboundLink")],1),t._v(" trait，就可以用 "),r("code",[t._v("parse")]),t._v(" 把字符串转换成目标类型。\n标准库中已经给无数种类型实现了 "),r("code",[t._v("FromStr")]),t._v("。如果要转换到用户定义类型，只要手动实现\n"),r("code",[t._v("FromStr")]),t._v(" 就行。")]),t._v(" "),r("div",{staticClass:"language-rust extra-class"},[r("pre",{pre:!0,attrs:{class:"language-rust"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" parsed"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" turbo_parsed "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("unwrap")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parsed "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" turbo_parsed"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Sum: {:?}"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sum"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=a.exports}}]);