(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{513:function(n,e,t){"use strict";t.r(e);var r=t(4),a=Object(r.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"c-风格用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#c-风格用法"}},[n._v("#")]),n._v(" C 风格用法")]),n._v(" "),t("p",[t("code",[n._v("enum")]),n._v(" 也可以像 C 语言风格的枚举类型那样使用。")]),n._v(" "),t("div",{staticClass:"language-rust,editable extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// 该属性用于隐藏对未使用代码的警告。\n#![allow(dead_code)]\n\n// 拥有隐式辨别值（implicit discriminator，从 0 开始）的 enum\nenum Number {\n    Zero,\n    One,\n    Two,\n}\n\n// 拥有显式辨别值（explicit discriminator）的 enum\nenum Color {\n    Red = 0xff0000,\n    Green = 0x00ff00,\n    Blue = 0x0000ff,\n}\n\nfn main() {\n    // `enum` 可以转成整形。\n    println!("zero is {}", Number::Zero as i32);\n    println!("one is {}", Number::One as i32);\n\n    println!("roses are #{:06x}", Color::Red as i32);\n    println!("violets are #{:06x}", Color::Blue as i32);\n}\n')])])]),t("h3",{attrs:{id:"参考："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考："}},[n._v("#")]),n._v(" 参考：")]),n._v(" "),t("p",[t("RouterLink",{attrs:{to:"/types/cast.html"}},[n._v("类型转换")])],1)])}),[],!1,null,null,null);e.default=a.exports}}]);