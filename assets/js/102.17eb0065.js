(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{579:function(t,e,n){"use strict";n.r(e);var r=n(4),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"格式化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#格式化"}},[t._v("#")]),t._v(" 格式化")]),t._v(" "),n("p",[t._v("我们已经看到，格式化的方式是通过"),n("strong",[t._v("格式字符串")]),t._v("来指定的：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v('format!("{}", foo)')]),t._v(" -> "),n("code",[t._v('"3735928559"')])]),t._v(" "),n("li",[n("code",[t._v('format!("0x{:X}", foo)')]),t._v(" ->\n"),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Deadbeef#Magic_debug_values",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v('"0xDEADBEEF"')]),n("OutboundLink")],1)]),t._v(" "),n("li",[n("code",[t._v('format!("0o{:o}", foo)')]),t._v(" -> "),n("code",[t._v('"0o33653337357"')])])]),t._v(" "),n("p",[t._v("根据使用的"),n("strong",[t._v("参数类型")]),t._v("是 "),n("code",[t._v("X")]),t._v("、"),n("code",[t._v("o")]),t._v(" 还是"),n("strong",[t._v("未指定")]),t._v("，同样的变量（"),n("code",[t._v("foo")]),t._v("）能够格式化\n成不同的形式。")]),t._v(" "),n("p",[t._v("这个格式化的功能是通过 trait 实现的，每种参数类型都对应一种 trait。最常见的格式\n化 trait 就是 "),n("code",[t._v("Display")]),t._v("，它可以处理参数类型为未指定的情况，比如 "),n("code",[t._v("{}")]),t._v("。")]),t._v(" "),n("div",{staticClass:"language-rust,editable extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('use std::fmt::{self, Formatter, Display};\n\nstruct City {\n    name: &\'static str,\n    // 纬度\n    lat: f32,\n    // 经度\n    lon: f32,\n}\n\nimpl Display for City {\n    // `f` 是一个缓冲区（buffer），此方法必须将格式化后的字符串写入其中\n    fn fmt(&self, f: &mut Formatter) -> fmt::Result {\n        let lat_c = if self.lat >= 0.0 { \'N\' } else { \'S\' };\n        let lon_c = if self.lon >= 0.0 { \'E\' } else { \'W\' };\n\n        // `write!` 和 `format!` 类似，但它会将格式化后的字符串写入\n        // 一个缓冲区（即第一个参数f）中。\n        write!(f, "{}: {:.3}°{} {:.3}°{}",\n               self.name, self.lat.abs(), lat_c, self.lon.abs(), lon_c)\n    }\n}\n\n#[derive(Debug)]\nstruct Color {\n    red: u8,\n    green: u8,\n    blue: u8,\n}\n\nfn main() {\n    for city in [\n        City { name: "Dublin", lat: 53.347778, lon: -6.259722 },\n        City { name: "Oslo", lat: 59.95, lon: 10.75 },\n        City { name: "Vancouver", lat: 49.25, lon: -123.1 },\n    ].iter() {\n        println!("{}", *city);\n    }\n    for color in [\n        Color { red: 128, green: 255, blue: 90 },\n        Color { red: 0, green: 3, blue: 254 },\n        Color { red: 0, green: 0, blue: 0 },\n    ].iter() {\n        // 在添加了针对 fmt::Display 的实现后，请改用 {} 检验效果。\n        println!("{:?}", *color)\n    }\n}\n')])])]),n("p",[t._v("在 "),n("a",{attrs:{href:"http://doc.rust-lang.org/std/fmt/",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("fmt::fmt")]),n("OutboundLink")],1),t._v(" 文档中可以查看"),n("a",{attrs:{href:"http://doc.rust-lang.org/std/fmt/#formatting-traits",target:"_blank",rel:"noopener noreferrer"}},[t._v("格式化 traits 一览表"),n("OutboundLink")],1),t._v("和它们的参\n数类型。")]),t._v(" "),n("h3",{attrs:{id:"动手试一试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动手试一试"}},[t._v("#")]),t._v(" 动手试一试")]),t._v(" "),n("p",[t._v("为上面的 "),n("code",[t._v("Color")]),t._v(" 结构体实现 "),n("code",[t._v("fmt::Display")]),t._v("，应得到如下的输出结果：")]),t._v(" "),n("div",{staticClass:"language-text extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("RGB (128, 255, 90) 0x80FF5A\nRGB (0, 3, 254) 0x0003FE\nRGB (0, 0, 0) 0x000000\n")])])]),n("p",[t._v("如果感到疑惑，可看下面两条提示：")]),t._v(" "),n("ul",[n("li",[t._v("你"),n("a",{attrs:{href:"http://doc.rust-lang.org/std/fmt/#argument-types",target:"_blank",rel:"noopener noreferrer"}},[t._v("可能需要多次列出每个颜色"),n("OutboundLink")],1),t._v("，")]),t._v(" "),n("li",[t._v("你可以使用 "),n("code",[t._v(":02")]),t._v(" "),n("a",{attrs:{href:"http://doc.rust-lang.org/std/fmt/#width",target:"_blank",rel:"noopener noreferrer"}},[t._v("补零使位数为 2 位"),n("OutboundLink")],1),t._v("。")])]),t._v(" "),n("h3",{attrs:{id:"参见："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参见："}},[t._v("#")]),t._v(" 参见：")]),t._v(" "),n("p",[n("a",{attrs:{href:"http://doc.rust-lang.org/std/fmt/",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("std::fmt")]),n("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=a.exports}}]);