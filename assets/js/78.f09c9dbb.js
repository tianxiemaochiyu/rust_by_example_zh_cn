(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{557:function(t,n,e){"use strict";e.r(n);var r=e(4),i=Object(r.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"iterator-find"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iterator-find"}},[t._v("#")]),t._v(" Iterator::find")]),t._v(" "),e("p",[e("code",[t._v("Iterator::find")]),t._v(" 是一个函数，在传给它一个迭代器时，将用 "),e("code",[t._v("Option")]),t._v(" 类型返回第一个\n满足谓词的元素。它的签名如下：")]),t._v(" "),e("div",{staticClass:"language-rust,ignore extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pub trait Iterator {\n    // 被迭代的类型。\n    type Item;\n\n    // `find` 接受 `&mut self` 参数，表明函数的调用者可以被借用和修改，\n    // 但不会被消耗。\n    fn find<P>(&mut self, predicate: P) -> Option<Self::Item> where\n        // `FnMut` 表示被捕获的变量最多只能被修改，而不能被消耗。\n        // `&Self::Item` 指明了被捕获变量的类型（译注：是对迭代器元素的引用类型） \n        P: FnMut(&Self::Item) -> bool {}\n}\n")])])]),e("div",{staticClass:"language-rust,editable extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('fn main() {\n    let vec1 = vec![1, 2, 3];\n    let vec2 = vec![4, 5, 6];\n\n    // 对 vec1 的 `iter()` 举出 `&i32` 类型。\n    let mut iter = vec1.iter();\n    // 对 vec2 的 `into_iter()` 举出 `i32` 类型。\n    let mut into_iter = vec2.into_iter();\n\n    // 对迭代器举出的元素的引用是 `&&i32` 类型。解构成 `i32` 类型。\n    // 译注：注意 `find` 方法会把迭代器元素的引用传给闭包。迭代器元素自身\n    // 是 `&i32` 类型，所以传给闭包的是 `&&i32` 类型。\n    println!("Find 2 in vec1: {:?}", iter     .find(|&&x| x == 2));\n    // 对迭代器举出的元素的引用是 `&i32` 类型。解构成 `i32` 类型。\n    println!("Find 2 in vec2: {:?}", into_iter.find(| &x| x == 2));\n\n    let array1 = [1, 2, 3];\n    let array2 = [4, 5, 6];\n\n    // 对数组的 `iter()` 举出 `&i32`。\n    println!("Find 2 in array1: {:?}", array1.iter()     .find(|&&x| x == 2));\n    // 对数组的 `into_iter()` 通常举出 `&i32``。\n    println!("Find 2 in array2: {:?}", array2.into_iter().find(|&&x| x == 2));\n}\n')])])]),e("h3",{attrs:{id:"参见："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参见："}},[t._v("#")]),t._v(" 参见：")]),t._v(" "),e("p",[e("a",{attrs:{href:"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("std::iter::Iterator::find")]),e("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=i.exports}}]);