(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{575:function(e,n,t){"use strict";t.r(n);var s=t(4),a=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"new-type-惯用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new-type-惯用法"}},[e._v("#")]),e._v(" new type 惯用法")]),e._v(" "),t("p",[t("code",[e._v("newtype")]),e._v(" 惯用法（译注：即为不同种类的数据分别定义新的类型）能保证在编译时，提供\n给程序的都是正确的类型。")]),e._v(" "),t("p",[e._v("比如说，实现一个 “年龄认证” 函数，它要求输入"),t("strong",[e._v("必须")]),e._v("是 "),t("code",[e._v("Years")]),e._v(" 类型。")]),e._v(" "),t("div",{staticClass:"language-rust, editable extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('struct Years(i64);\n\nstruct Days(i64);\n\nimpl Years {\n    pub fn to_days(&self) -> Days {\n        Days(self.0 * 365)\n    }\n}\n\n\nimpl Days {\n    /// 舍去不满一年的部分\n    pub fn to_years(&self) -> Years {\n        Years(self.0 / 365)\n    }\n}\n\nfn old_enough(age: &Years) -> bool {\n    age.0 >= 18\n}\n\nfn main() {\n    let age = Years(5);\n    let age_days = age.to_days();\n    println!("Old enough {}", old_enough(&age));\n    println!("Old enough {}", old_enough(&age_days.to_years()));\n    // println!("Old enough {}", old_enough(&age_days));\n}\n')])])]),t("p",[e._v("取消最后一行的注释，就可以发现提供给 "),t("code",[e._v("old_enough")]),e._v(" 的必须是 "),t("code",[e._v("Years")]),e._v(" 类型。")]),e._v(" "),t("h3",{attrs:{id:"see-also"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#see-also"}},[e._v("#")]),e._v(" See also:")]),e._v(" "),t("p",[t("RouterLink",{attrs:{to:"/custom_types/structs.html"}},[t("code",[e._v("structs")])])],1)])}),[],!1,null,null,null);n.default=a.exports}}]);