(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{532:function(r,n,t){"use strict";t.r(n);var e=t(4),s=Object(e.a)({},(function(){var r=this,n=r.$createElement,t=r._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h1",{attrs:{id:"引入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引入"}},[r._v("#")]),r._v(" 引入 "),t("code",[r._v("?")])]),r._v(" "),t("p",[r._v("有时我们只是想 "),t("code",[r._v("unwrap")]),r._v(" 且避免产生 "),t("code",[r._v("panic")]),r._v("。到现在为止，对 "),t("code",[r._v("unwrap")]),r._v(" 的错误处理都在强迫\n我们一层层地嵌套，然而我们只是想把里面的变量拿出来。"),t("code",[r._v("?")]),r._v(" 正是为这种情况准备的。")]),r._v(" "),t("p",[r._v("当找到一个 "),t("code",[r._v("Err")]),r._v(" 时，可以采取两种行动：")]),r._v(" "),t("ol",[t("li",[t("code",[r._v("panic!")]),r._v("，不过我们已经决定要尽可能避免 panic 了。")]),r._v(" "),t("li",[r._v("返回它，因为 "),t("code",[r._v("Err")]),r._v(" 就意味着它已经不能被处理了。")])]),r._v(" "),t("p",[t("code",[r._v("?")]),r._v(" "),t("strong",[r._v("几乎")]),r._v("[^†] 就等于一个会返回 "),t("code",[r._v("Err")]),r._v(" 而不是 "),t("code",[r._v("panic")]),r._v(" 的 "),t("code",[r._v("unwrap")]),r._v("。我们来看看\n怎样简化之前使用组合算子的例子：")]),r._v(" "),t("div",{staticClass:"language-rust,editable extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v('use std::num::ParseIntError;\n\nfn multiply(first_number_str: &str, second_number_str: &str) -> Result<i32, ParseIntError> {\n    let first_number = first_number_str.parse::<i32>()?;\n    let second_number = second_number_str.parse::<i32>()?;\n\n    Ok(first_number * second_number)\n}\n\nfn print(result: Result<i32, ParseIntError>) {\n    match result {\n        Ok(n)  => println!("n is {}", n),\n        Err(e) => println!("Error: {}", e),\n    }\n}\n\nfn main() {\n    print(multiply("10", "2"));\n    print(multiply("t", "2"));\n}\n')])])]),t("h2",{attrs:{id:"try-宏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#try-宏"}},[r._v("#")]),r._v(" "),t("code",[r._v("try!")]),r._v(" 宏")]),r._v(" "),t("p",[r._v("在 "),t("code",[r._v("?")]),r._v(" 出现以前，相同的功能是使用 "),t("code",[r._v("try!")]),r._v(" 宏完成的。现在我们推荐使用 "),t("code",[r._v("?")]),r._v(" 运算符，但是\n在老代码中仍然会看到 "),t("code",[r._v("try!")]),r._v("。如果使用 "),t("code",[r._v("try!")]),r._v(" 的话，上一个例子中的 "),t("code",[r._v("multiply")]),r._v(" 函数\n看起来会像是这样：")]),r._v(" "),t("div",{staticClass:"language-rust,editable extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v('use std::num::ParseIntError;\n\nfn multiply(first_number_str: &str, second_number_str: &str) -> Result<i32, ParseIntError> {\n    let first_number = try!(first_number_str.parse::<i32>());\n    let second_number = try!(second_number_str.parse::<i32>());\n\n    Ok(first_number * second_number)\n}\n\nfn print(result: Result<i32, ParseIntError>) {\n    match result {\n        Ok(n)  => println!("n is {}", n),\n        Err(e) => println!("Error: {}", e),\n    }\n}\n\nfn main() {\n    print(multiply("10", "2"));\n    print(multiply("t", "2"));\n}\n')])])]),t("p",[r._v("[^†]: 更多细节请看"),t("RouterLink",{attrs:{to:"/error/multiple_error_types/reenter_question_mark.html"}},[t("code",[r._v("?")]),r._v(" 的更多用法")]),r._v("。")],1)])}),[],!1,null,null,null);n.default=s.exports}}]);