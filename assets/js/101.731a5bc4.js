(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{580:function(t,n,r){"use strict";r.r(n);var e=r(4),o=Object(e.a)({},(function(){var t=this,n=t.$createElement,r=t._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"格式化输出"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#格式化输出"}},[t._v("#")]),t._v(" 格式化输出")]),t._v(" "),r("p",[t._v("打印操作由 "),r("a",{attrs:{href:"https://doc.rust-lang.org/std/fmt/",target:"_blank",rel:"noopener noreferrer"}},[r("code",[t._v("std::fmt")]),r("OutboundLink")],1),t._v(" 里面所定义的一系列"),r("RouterLink",{attrs:{to:"/macros.html"}},[r("code",[t._v("宏")])]),t._v("来处理，包括：")],1),t._v(" "),r("ul",[r("li",[r("code",[t._v("format!")]),t._v("：将格式化文本写到"),r("RouterLink",{attrs:{to:"/std/str.html"}},[r("code",[t._v("字符串")])]),t._v("（String）。（译注："),r("code",[t._v("字符串")]),t._v("是返\n回值不是参数。）")],1),t._v(" "),r("li",[r("code",[t._v("print!")]),t._v("：与 "),r("code",[t._v("format!")]),t._v(" 类似，但将文本输出到控制台（io::stdout）。")]),t._v(" "),r("li",[r("code",[t._v("println!")]),t._v(": 与 "),r("code",[t._v("print!")]),t._v(" 类似，但输出结果追加一个换行符。")]),t._v(" "),r("li",[r("code",[t._v("eprint!")]),t._v("：与 "),r("code",[t._v("format!")]),t._v(" 类似，但将文本输出到标准错误（io::stderr）。")]),t._v(" "),r("li",[r("code",[t._v("eprintln!")]),t._v("：与 "),r("code",[t._v("eprint!")]),t._v(" 类似，但输出结果追加一个换行符。")])]),t._v(" "),r("p",[t._v("这些宏都以相同的做法解析（parse）文本。另外有个优点是格式化的正确性会在编译时检查。")]),t._v(" "),r("div",{staticClass:"language-rust,editable,ignore,mdbook-runnable extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('fn main() {\n    // 通常情况下，`{}` 会被任意变量内容所替换。\n    // 变量内容会转化成字符串。\n    println!("{} days", 31);\n\n    // 不加后缀的话，31 就自动成为 i32 类型。\n    // 你可以添加后缀来改变 31 的类型。\n\n    // 用变量替换字符串有多种写法。\n    // 比如可以使用位置参数。\n    println!("{0}, this is {1}. {1}, this is {0}", "Alice", "Bob");\n\n    // 可以使用命名参数。\n    println!("{subject} {verb} {object}",\n             object="the lazy dog",\n             subject="the quick brown fox",\n             verb="jumps over");\n\n    // 可以在 `:` 后面指定特殊的格式。\n    println!("{} of {:b} people know binary, the other half don\'t", 1, 2);\n\n    // 你可以按指定宽度来右对齐文本。\n    // 下面语句输出 "     1"，5 个空格后面连着 1。\n    println!("{number:>width$}", number=1, width=6);\n\n    // 你可以在数字左边补 0。下面语句输出 "000001"。\n    println!("{number:>0width$}", number=1, width=6);\n\n    // println! 会检查使用到的参数数量是否正确。\n    println!("My name is {0}, {1} {0}", "Bond");\n    // 改正 ^ 补上漏掉的参数："James"\n\n    // 创建一个包含单个 `i32` 的结构体（structure）。命名为 `Structure`。\n    #[allow(dead_code)]\n    struct Structure(i32);\n\n    // 但是像结构体这样的自定义类型需要更复杂的方式来处理。\n    // 下面语句无法运行。\n    println!("This struct `{}` won\'t print...", Structure(3));\n    // 改正 ^ 注释掉此行。\n}\n')])])]),r("p",[r("a",{attrs:{href:"https://doc.rust-lang.org/std/fmt/",target:"_blank",rel:"noopener noreferrer"}},[r("code",[t._v("std::fmt")]),r("OutboundLink")],1),t._v(" 包含多种 "),r("RouterLink",{attrs:{to:"/trait.html"}},[r("code",[t._v("traits")])]),t._v("（trait 有 “特征，特性” 等意思）\n来控制文字显示，其中重要的两种 trait 的基本形式如下：")],1),t._v(" "),r("ul",[r("li",[r("code",[t._v("fmt::Debug")]),t._v("：使用 "),r("code",[t._v("{:?}")]),t._v(" 标记。格式化文本以供调试使用。")]),t._v(" "),r("li",[r("code",[t._v("fmt::Display")]),t._v("：使用 "),r("code",[t._v("{}")]),t._v(" 标记。以更优雅和友好的风格来格式化文本。")])]),t._v(" "),r("p",[t._v("上例使用了 "),r("code",[t._v("fmt::Display")]),t._v("，因为标准库提供了那些类型的实现。若要打印自定义类型的\n文本，需要更多的步骤。")]),t._v(" "),r("h3",{attrs:{id:"动手试一试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动手试一试"}},[t._v("#")]),t._v(" 动手试一试")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("改正上面代码中的两个错误（见 “改正”），使它可以没有错误地运行。")])]),t._v(" "),r("li",[r("p",[t._v("再用一个 "),r("code",[t._v("println!")]),t._v(" 宏，通过控制显示的小数位数来打印："),r("code",[t._v("Pi is roughly 3.142")]),t._v("\n（Pi 约等于 3.142）。为了达到练习目的，使用 "),r("code",[t._v("let pi = 3.141592")]),t._v(" 作为 Pi 的近似\n值（提示：设置小数位的显示格式可以参考文档 "),r("a",{attrs:{href:"https://doc.rust-lang.org/std/fmt/",target:"_blank",rel:"noopener noreferrer"}},[r("code",[t._v("std::fmt")]),r("OutboundLink")],1),t._v("）。")])])]),t._v(" "),r("h3",{attrs:{id:"参见："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参见："}},[t._v("#")]),t._v(" 参见：")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://doc.rust-lang.org/std/fmt/",target:"_blank",rel:"noopener noreferrer"}},[r("code",[t._v("std::fmt")]),r("OutboundLink")],1),t._v(", "),r("RouterLink",{attrs:{to:"/macros.html"}},[r("code",[t._v("macros")])]),t._v(", "),r("RouterLink",{attrs:{to:"/custom_types/structs.html"}},[r("code",[t._v("struct")])]),t._v(" 和 "),r("RouterLink",{attrs:{to:"/trait.html"}},[r("code",[t._v("traits")])])],1)])}),[],!1,null,null,null);n.default=o.exports}}]);