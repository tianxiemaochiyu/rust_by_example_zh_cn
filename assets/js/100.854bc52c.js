(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{578:function(t,n,e){"use strict";e.r(n);var a=e(4),l=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"注释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[t._v("#")]),t._v(" 注释")]),t._v(" "),e("p",[t._v("注释对任何程序都不可缺少，同样 Rust 支持几种不同的注释方式。")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("普通注释")]),t._v("，其内容将被编译器忽略掉：")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("// 单行注释，注释内容直到行尾。")])]),t._v(" "),e("li",[e("code",[t._v("/* 块注释， 注释内容一直到结束分隔符。 */")])])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("文档注释")]),t._v("，其内容将被解析成 HTML 帮助"),e("RouterLink",{attrs:{to:"/meta/doc.html"}},[t._v("文档")]),t._v(":")],1)]),t._v(" "),e("ul",[e("li",[e("code",[t._v("/// 为接下来的项生成帮助文档。")])]),t._v(" "),e("li",[e("code",[t._v("//! 为注释所属于的项（译注：如 crate、模块或函数）生成帮助文档。")])])]),t._v(" "),e("div",{staticClass:"language-rust,editable extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('fn main() {\n    // 这是行注释的例子\n    // 注意有两个斜线在本行的开头\n    // 在这里面的所有内容都不会被编译器读取\n\n    // println!("Hello, world!");\n\n    // 请运行一下，你看到结果了吗？现在请将上述语句的两条斜线删掉，并重新运行。\n\n    /*\n     * 这是另外一种注释——块注释。一般而言，行注释是推荐的注释格式，\n     * 不过块注释在临时注释大块代码特别有用。/* 块注释可以 /* 嵌套, */ */\n     * 所以只需很少按键就可注释掉这些 main() 函数中的行。/*/*/* 自己试试！*/*/*/\n     */\n\n     /*\n      注意，上面的例子中纵向都有 `*`，这只是一种风格，实际上这并不是必须的。\n      */\n\n     // 观察块注释是如何简单地对表达式进行修改的，行注释则不能这样。\n     // 删除注释分隔符将会改变结果。\n     let x = 5 + /* 90 + */ 5;\n     println!("Is `x` 10 or 100? x = {}", x);\n}\n')])])]),e("h3",{attrs:{id:"参见"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参见"}},[t._v("#")]),t._v(" 参见:")]),t._v(" "),e("p",[e("RouterLink",{attrs:{to:"/meta/doc.html"}},[t._v("文档注释")])],1)])}),[],!1,null,null,null);n.default=l.exports}}]);