(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{544:function(t,n,o){"use strict";o.r(n);var e=o(4),r=Object(e.a)({},(function(){var t=this,n=t.$createElement,o=t._self._c||n;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"结构体"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#结构体"}},[t._v("#")]),t._v(" 结构体")]),t._v(" "),o("p",[t._v("类似地，解构 "),o("code",[t._v("struct")]),t._v(" 如下所示：")]),t._v(" "),o("div",{staticClass:"language-rust,editable extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v('fn main() {\n    struct Foo { x: (u32, u32), y: u32 }\n\n    // 解构结构体的成员\n    let foo = Foo { x: (1, 2), y: 3 };\n    let Foo { x: (a, b), y } = foo;\n\n    println!("a = {}, b = {},  y = {} ", a, b, y);\n\n    // 可以解构结构体并重命名变量，成员顺序并不重要\n\n    let Foo { y: i, x: j } = foo;\n    println!("i = {:?}, j = {:?}", i, j);\n\n    // 也可以忽略某些变量\n    let Foo { y, .. } = foo;\n    println!("y = {}", y);\n\n    // 这将得到一个错误：模式中没有提及 `x` 字段\n    // let Foo { y } = foo;\n}\n')])])]),o("h3",{attrs:{id:"参见："}},[o("a",{staticClass:"header-anchor",attrs:{href:"#参见："}},[t._v("#")]),t._v(" 参见：")]),t._v(" "),o("p",[o("RouterLink",{attrs:{to:"/custom_types/structs.html"}},[t._v("结构体")]),t._v(", "),o("RouterLink",{attrs:{to:"/scope/borrow/ref.html"}},[t._v("ref 模式")])],1)])}),[],!1,null,null,null);n.default=r.exports}}]);