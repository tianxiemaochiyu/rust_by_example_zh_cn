(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{560:function(n,e,t){"use strict";t.r(e);var l=t(4),r=Object(l.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[n._v("#")]),n._v(" 方法")]),n._v(" "),t("p",[n._v("方法（method）是依附于对象的函数。这些方法通过关键字 "),t("code",[n._v("self")]),n._v(" 来访问对象中的数据和\n其他。方法在 "),t("code",[n._v("impl")]),n._v(" 代码块中定义。")]),n._v(" "),t("div",{staticClass:"language-rust,editable extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('struct Point {\n    x: f64,\n    y: f64,\n}\n\n// 实现的代码块，`Point` 的所有方法都在这里给出\nimpl Point {\n    // 这是一个静态方法（static method）\n    // 静态方法不需要被实例调用\n    // 这类方法一般用作构造器（constructor）\n    fn origin() -> Point {\n        Point { x: 0.0, y: 0.0 }\n    }\n\n    // 另外一个静态方法，需要两个参数：\n    fn new(x: f64, y: f64) -> Point {\n        Point { x: x, y: y }\n    }\n}\n\nstruct Rectangle {\n    p1: Point,\n    p2: Point,\n}\n\nimpl Rectangle {\n    // 这是一个实例方法（instance method）\n    // `&self` 是 `self: &Self` 的语法糖（sugar），其中 `Self` 是方法调用者的\n    // 类型。在这个例子中 `Self` = `Rectangle`\n    fn area(&self) -> f64 {\n        // `self` 通过点运算符来访问结构体字段\n        let Point { x: x1, y: y1 } = self.p1;\n        let Point { x: x2, y: y2 } = self.p2;\n\n        // `abs` 是一个 `f64` 类型的方法，返回调用者的绝对值\n        ((x1 - x2) * (y1 - y2)).abs()\n    }\n\n    fn perimeter(&self) -> f64 {\n        let Point { x: x1, y: y1 } = self.p1;\n        let Point { x: x2, y: y2 } = self.p2;\n\n        2.0 * ((x1 - x2).abs() + (y1 - y2).abs())\n    }\n\n    // 这个方法要求调用者是可变的\n    // `&mut self` 为 `self: &mut Self` 的语法糖\n    fn translate(&mut self, x: f64, y: f64) {\n        self.p1.x += x;\n        self.p2.x += x;\n\n        self.p1.y += y;\n        self.p2.y += y;\n    }\n}\n\n// `Pair` 拥有资源：两个堆分配的整型\nstruct Pair(Box<i32>, Box<i32>);\n\nimpl Pair {\n    // 这个方法会 “消耗” 调用者的资源\n    // `self` 为 `self: Self` 的语法糖\n    fn destroy(self) {\n        // 解构 `self`\n        let Pair(first, second) = self;\n\n        println!("Destroying Pair({}, {})", first, second);\n\n        // `first` 和 `second` 离开作用域后释放\n    }\n}\n\nfn main() {\n    let rectangle = Rectangle {\n        // 静态方法使用双冒号调用\n        p1: Point::origin(),\n        p2: Point::new(3.0, 4.0),\n    };\n\n    // 实例方法通过点运算符来调用\n    // 注意第一个参数 `&self` 是隐式传递的，亦即：\n    // `rectangle.perimeter()` === `Rectangle::perimeter(&rectangle)`\n    println!("Rectangle perimeter: {}", rectangle.perimeter());\n    println!("Rectangle area: {}", rectangle.area());\n\n    let mut square = Rectangle {\n        p1: Point::origin(),\n        p2: Point::new(1.0, 1.0),\n    };\n\n    // 报错！ `rectangle` 是不可变的，但这方法需要一个可变对象\n    //rectangle.translate(1.0, 0.0);\n    // 试一试 ^ 去掉此行的注释\n\n    // 正常运行！可变对象可以调用可变方法\n    square.translate(1.0, 1.0);\n\n    let pair = Pair(Box::new(1), Box::new(2));\n\n    pair.destroy();\n\n    // 报错！前面的 `destroy` 调用 “消耗了” `pair`\n    //pair.destroy();\n    // 试一试 ^ 将此行注释去掉\n}\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);