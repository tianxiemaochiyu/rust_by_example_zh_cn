(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{509:function(r,t,e){"use strict";e.r(t);var n=e(4),o=Object(n.a)({},(function(){var r=this,t=r.$createElement,e=r._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"tryfrom-and-tryinto"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tryfrom-and-tryinto"}},[r._v("#")]),r._v(" "),e("code",[r._v("TryFrom")]),r._v(" and "),e("code",[r._v("TryInto")])]),r._v(" "),e("p",[r._v("类似于 "),e("RouterLink",{attrs:{to:"/conversion/from_into.html"}},[e("code",[r._v("From")]),r._v(" 和 "),e("code",[r._v("Into")])]),r._v("，"),e("a",{attrs:{href:"https://doc.rust-lang.org/std/convert/trait.TryFrom.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[r._v("TryFrom")]),e("OutboundLink")],1),r._v(" 和 "),e("a",{attrs:{href:"https://doc.rust-lang.org/std/convert/trait.TryInto.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[r._v("TryInto")]),e("OutboundLink")],1),r._v(" 是\n类型转换的通用 trait。不同于 "),e("code",[r._v("From")]),r._v("/"),e("code",[r._v("Into")]),r._v(" 的是，"),e("code",[r._v("TryFrom")]),r._v(" 和 "),e("code",[r._v("TryInto")]),r._v(" trait 用于易出错的转换，也正因如此，其返回值是 "),e("a",{attrs:{href:"https://doc.rust-lang.org/std/result/enum.Result.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[r._v("Result")]),e("OutboundLink")],1),r._v(" 型。")],1),r._v(" "),e("div",{staticClass:"language-rust,editable extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("use std::convert::TryFrom;\nuse std::convert::TryInto;\n\n#[derive(Debug, PartialEq)]\nstruct EvenNumber(i32);\n\nimpl TryFrom<i32> for EvenNumber {\n    type Error = ();\n\n    fn try_from(value: i32) -> Result<Self, Self::Error> {\n        if value % 2 == 0 {\n            Ok(EvenNumber(value))\n        } else {\n            Err(())\n        }\n    }\n}\n\nfn main() {\n    // TryFrom\n\n    assert_eq!(EvenNumber::try_from(8), Ok(EvenNumber(8)));\n    assert_eq!(EvenNumber::try_from(5), Err(()));\n\n    // TryInto\n\n    let result: Result<EvenNumber, ()> = 8i32.try_into();\n    assert_eq!(result, Ok(EvenNumber(8)));\n    let result: Result<EvenNumber, ()> = 5i32.try_into();\n    assert_eq!(result, Err(()));\n}\n")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);