(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{582:function(t,e,n){"use strict";n.r(e);var r=n(4),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"调试（debug）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调试（debug）"}},[t._v("#")]),t._v(" 调试（Debug）")]),t._v(" "),n("p",[t._v("所有的类型，若想用 "),n("code",[t._v("std::fmt")]),t._v(" 的格式化 "),n("code",[t._v("trait")]),t._v(" 打印出来，都要求实现这个\n"),n("code",[t._v("trait")]),t._v("。自动的实现只为一些类型提供，比如 "),n("code",[t._v("std")]),t._v(" 库中的类型。所有其他类型\n都"),n("strong",[t._v("必须")]),t._v("手动实现。")]),t._v(" "),n("p",[n("code",[t._v("fmt::Debug")]),t._v(" 这个 "),n("code",[t._v("trait")]),t._v(" 使这项工作变得相当简单。所有类型都能推导（"),n("code",[t._v("derive")]),t._v("，即自\n动创建）"),n("code",[t._v("fmt::Debug")]),t._v(" 的实现。但是 "),n("code",[t._v("fmt::Display")]),t._v(" 需要手动实现。")]),t._v(" "),n("div",{staticClass:"language-rust extra-class"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个结构体不能使用 `fmt::Display` 或 `fmt::Debug` 来进行打印。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("UnPrintable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `derive` 属性会自动创建所需的实现，使这个 `struct` 能使用 `fmt::Debug` 打印。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[derive(Debug)]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("DebugPrintable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("所有 "),n("code",[t._v("std")]),t._v(" 库类型都天生可以使用 "),n("code",[t._v("{:?}")]),t._v(" 来打印：")]),t._v(" "),n("div",{staticClass:"language-rust,editable extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('// 推导 `Structure` 的 `fmt::Debug` 实现。\n// `Structure` 是一个包含单个 `i32` 的结构体。\n#[derive(Debug)]\nstruct Structure(i32);\n\n// 将 `Structure` 放到结构体 `Deep` 中。然后使 `Deep` 也能够打印。\n#[derive(Debug)]\nstruct Deep(Structure);\n\nfn main() {\n    // 使用 `{:?}` 打印和使用 `{}` 类似。\n    println!("{:?} months in a year.", 12);\n    println!("{1:?} {0:?} is the {actor:?} name.",\n             "Slater",\n             "Christian",\n             actor="actor\'s");\n\n    // `Structure` 也可以打印！\n    println!("Now {:?} will print!", Structure(3));\n    \n    // 使用 `derive` 的一个问题是不能控制输出的形式。\n    // 假如我只想展示一个 `7` 怎么办？\n    println!("Now {:?} will print!", Deep(Structure(7)));\n}\n')])])]),n("p",[t._v("所以 "),n("code",[t._v("fmt::Debug")]),t._v(" 确实使这些内容可以打印，但是牺牲了一些美感。Rust 也通过\n"),n("code",[t._v("{:#?}")]),t._v(" 提供了 “美化打印” 的功能：")]),t._v(" "),n("div",{staticClass:"language-rust,editable extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('#[derive(Debug)]\nstruct Person<\'a> {\n    name: &\'a str,\n    age: u8\n}\n\nfn main() {\n    let name = "Peter";\n    let age = 27;\n    let peter = Person { name, age };\n\n    // 美化打印\n    println!("{:#?}", peter);\n}\n')])])]),n("p",[t._v("你可以通过手动实现 "),n("code",[t._v("fmt::Display")]),t._v(" 来控制显示效果。")]),t._v(" "),n("h3",{attrs:{id:"参见："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参见："}},[t._v("#")]),t._v(" 参见：")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://doc.rust-lang.org/reference/attributes.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("attributes"),n("OutboundLink")],1),t._v(", "),n("RouterLink",{attrs:{to:"/trait/derive.html"}},[n("code",[t._v("derive")])]),t._v(", "),n("a",{attrs:{href:"https://doc.rust-lang.org/std/fmt/",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("std::fmt")]),n("OutboundLink")],1),t._v(" 和 "),n("RouterLink",{attrs:{to:"/custom_types/structs.html"}},[n("code",[t._v("struct")])])],1)])}),[],!1,null,null,null);e.default=a.exports}}]);