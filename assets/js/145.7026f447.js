(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{622:function(t,r,s){"use strict";s.r(r);var a=s(4),e=Object(a.a)({},(function(){var t=this,r=t.$createElement,s=t._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"raii"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#raii"}},[t._v("#")]),t._v(" RAII")]),t._v(" "),s("p",[t._v("Rust 的变量不只是在栈中保存数据：它们也"),s("strong",[t._v("占有")]),t._v("资源，比如 "),s("code",[t._v("Box<T>")]),t._v(" 占有\n堆（heap）中的内存。Rust 强制实行 "),s("a",{attrs:{href:"http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization",target:"_blank",rel:"noopener noreferrer"}},[t._v("RAII"),s("OutboundLink")],1),t._v("（Resource Acquisition Is\nInitiallization，资源获取即初始化），所以任何对象在离开作用域时，它的析构\n函数（destructor）就被调用，然后它占有的资源就被释放。")]),t._v(" "),s("p",[t._v("这种行为避免了"),s("strong",[t._v("资源泄漏")]),t._v("（resource leak），所以你再也不用手动释放内存或者担心\n内存泄漏（memory leak）！下面是个快速入门示例：")]),t._v(" "),s("div",{staticClass:"language-rust,editable extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// raii.rs\nfn create_box() {\n    // 在堆上分配一个整型数据\n    let _box1 = Box::new(3i32);\n\n    // `_box1` 在这里被销毁，内存得到释放\n}\n\nfn main() {\n    // 在堆上分配一个整型数据    \n    let _box2 = Box::new(5i32);\n\n    // 嵌套作用域：\n    {\n        // 在堆上分配一个整型数据\n        let _box3 = Box::new(4i32);\n\n        // `_box3` 在这里被销毁，内存得到释放        \n    }\n\n    // 创建一大堆 box（只是因为好玩）。\n    // 完全不需要手动释放内存！\n    for _ in 0u32..1_000 {\n        create_box();\n    }\n\n    // `_box2` 在这里被销毁，内存得到释放    \n}\n")])])]),s("p",[t._v("当然我们可以使用 "),s("a",{attrs:{href:"http://valgrind.org/info/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("valgrind")]),s("OutboundLink")],1),t._v(" 对内存错误进行仔细检查：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ rustc raii.rs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" valgrind ./raii\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26873")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" Memcheck, a memory error detector\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26873")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" Copyright "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("C"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2002")]),t._v("-2013, and GNU GPL'd, by Julian Seward et al.\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26873")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" Using Valgrind-3.9.0 and LibVEX"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" rerun with -h "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" copyright info\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26873")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" Command: ./raii\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26873")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26873")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26873")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" HEAP SUMMARY:\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26873")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" use at exit: "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" bytes "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" blocks\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26873")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("   total heap usage: "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1,013")]),t._v(" allocs, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1,013")]),t._v(" frees, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8,696")]),t._v(" bytes allocated\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26873")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26873")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" All heap blocks were freed -- no leaks are possible\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26873")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26873")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" For counts of detected and suppressed errors, rerun with: -v\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("26873")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" ERROR SUMMARY: "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" errors from "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" contexts "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("suppressed: "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" from "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("完全没有泄漏！")]),t._v(" "),s("h2",{attrs:{id:"析构函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#析构函数"}},[t._v("#")]),t._v(" 析构函数")]),t._v(" "),s("p",[t._v("Rust 中的析构函数概念是通过 "),s("a",{attrs:{href:"https://doc.rust-lang.org/std/ops/trait.Drop.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("Drop")]),s("OutboundLink")],1),t._v(" trait 提供的。当资源离开作用域，就调用析构\n函数。你无需为每种类型都实现 "),s("a",{attrs:{href:"https://doc.rust-lang.org/std/ops/trait.Drop.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("Drop")]),s("OutboundLink")],1),t._v(" trait，只要为那些需要自己的析构函数逻辑的\n类型实现就可以了。")]),t._v(" "),s("p",[t._v("运行下列例子，看看 "),s("a",{attrs:{href:"https://doc.rust-lang.org/std/ops/trait.Drop.html",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("Drop")]),s("OutboundLink")],1),t._v(" trait 是怎样工作的。当 "),s("code",[t._v("main")]),t._v(" 函数中的变量离开作用\n域，自定义的析构函数就会被调用：")]),t._v(" "),s("div",{staticClass:"language-rust,editable extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('struct ToDrop;\n\nimpl Drop for ToDrop {\n    fn drop(&mut self) {\n        println!("ToDrop is being dropped");\n    }\n}\n\nfn main() {\n    let x = ToDrop;\n    println!("Made a ToDrop!");\n}\n')])])]),s("h3",{attrs:{id:"参见："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参见："}},[t._v("#")]),t._v(" 参见：")]),t._v(" "),s("p",[s("RouterLink",{attrs:{to:"/std/box.html"}},[t._v("Box")])],1)])}),[],!1,null,null,null);r.default=e.exports}}]);