(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{496:function(t,e,a){"use strict";a.r(e);var r=a(4),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"约定规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#约定规范"}},[t._v("#")]),t._v(" 约定规范")]),t._v(" "),a("p",[t._v("在上一小节中，我们看到了以下目录层次结构：")]),t._v(" "),a("div",{staticClass:"language-txt extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("foo\n├── Cargo.toml\n└── src\n    └── main.rs\n")])])]),a("p",[t._v("假设我们要在同一个项目中有两个二进制可执行文件。 那要怎样做呢？")]),t._v(" "),a("p",[t._v("很显然，"),a("code",[t._v("cargo")]),t._v(" 支持这一点。正如我们之前看到的，默认二进制名称是 "),a("code",[t._v("main")]),t._v("，但可以通过将文件放在 "),a("code",[t._v("bin/")]),t._v(" 目录中来添加其他二进制可执行文件：")]),t._v(" "),a("div",{staticClass:"language-txt extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("foo\n├── Cargo.toml\n└── src\n    ├── main.rs\n    └── bin\n        └── my_other_bin.rs\n")])])]),a("p",[t._v("为了使得 "),a("code",[t._v("cargo")]),t._v(" 编译或运行这个二进制可执行文件而不是默认或其他二进制可执行文件，我们只需给 "),a("code",[t._v("cargo")]),t._v(" 增加一个参数 "),a("code",[t._v("--bin my_other_bin")]),t._v("，其中 "),a("code",[t._v("my_other_bin")]),t._v(" 是我们想要使用的二进制可执行文件的名称。")]),t._v(" "),a("p",[t._v("除了可添加其他二进制可执行文件外，"),a("code",[t._v("cargo")]),t._v(" 还支持"),a("a",{attrs:{href:"https://doc.rust-lang.org/cargo/guide/project-layout.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("更多功能"),a("OutboundLink")],1),t._v("，如基准测试，测试和示例。")]),t._v(" "),a("p",[t._v("在下一节中，我们将更仔细地学习测试的内容。")])])}),[],!1,null,null,null);e.default=n.exports}}]);