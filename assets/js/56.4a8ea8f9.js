(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{533:function(n,e,t){"use strict";t.r(e);var a=t(4),r=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"for-循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-循环"}},[n._v("#")]),n._v(" for 循环")]),n._v(" "),t("h2",{attrs:{id:"for-与区间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-与区间"}},[n._v("#")]),n._v(" for 与区间")]),n._v(" "),t("p",[t("code",[n._v("for in")]),n._v(" 结构可以遍历一个 "),t("code",[n._v("Iterator")]),n._v("（迭代器）。创建迭代器的一个最简单的方法是使\n用区间标记 "),t("code",[n._v("a..b")]),n._v("。这会生成从 "),t("code",[n._v("a")]),n._v("（包含此值） 到 "),t("code",[n._v("b")]),n._v("（不含此值）的，步长为 1 的\n一系列值。")]),n._v(" "),t("p",[n._v("让我们使用 "),t("code",[n._v("for")]),n._v(" 代替 "),t("code",[n._v("while")]),n._v(" 来写 FizzBuzz 程序。")]),n._v(" "),t("div",{staticClass:"language-rust,editable extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('fn main() {\n    // `n` 将在每次迭代中分别取 1, 2, ..., 100\n    for n in 1..101 {\n        if n % 15 == 0 {\n            println!("fizzbuzz");\n        } else if n % 3 == 0 {\n            println!("fizz");\n        } else if n % 5 == 0 {\n            println!("buzz");\n        } else {\n            println!("{}", n);\n        }\n    }\n}\n')])])]),t("p",[n._v("或者, 可以使用"),t("code",[n._v("a..=b")]),n._v("表示两端都包含在内的范围。上面的代码可以写成：")]),n._v(" "),t("div",{staticClass:"language-rust,editable extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('fn main() {\n    // `n` 将在每次迭代中分别取 1, 2, ..., 100\n    for n in 1..=100 {\n        if n % 15 == 0 {\n            println!("fizzbuzz");\n        } else if n % 3 == 0 {\n            println!("fizz");\n        } else if n % 5 == 0 {\n            println!("buzz");\n        } else {\n            println!("{}", n);\n        }\n    }\n}\n')])])]),t("h2",{attrs:{id:"for-与迭代器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-与迭代器"}},[n._v("#")]),n._v(" for 与迭代器")]),n._v(" "),t("p",[t("code",[n._v("for in")]),n._v(" 结构能以几种方式与 "),t("code",[n._v("Iterator")]),n._v(" 互动。在 "),t("RouterLink",{attrs:{to:"/trait/iter.html"}},[n._v("迭代器")]),n._v(" trait 一节将会谈\n到，如果没有特别指定，"),t("code",[n._v("for")]),n._v(" 循环会对给出的集合应用 "),t("code",[n._v("into_iter")]),n._v(" 函数，把它转换成\n一个迭代器。这并不是把集合变成迭代器的唯一方法，其他的方法有 "),t("code",[n._v("iter")]),n._v(" 和\n"),t("code",[n._v("iter_mut")]),n._v(" 函数。")],1),n._v(" "),t("p",[n._v("这三个函数会以不同的方式返回集合中的数据。")]),n._v(" "),t("ul",[t("li",[t("code",[n._v("iter")]),n._v(" - 在每次迭代中借用集合中的一个元素。这样集合本身不会被改变，循环之后仍\n可以使用。")])]),n._v(" "),t("div",{staticClass:"language-rust,editable extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('fn main() {\n    let names = vec!["Bob", "Frank", "Ferris"];\n\n    for name in names.iter() {\n        match name {\n            &"Ferris" => println!("There is a rustacean among us!"),\n            _ => println!("Hello {}", name),\n        }\n    }\n}\n')])])]),t("p",[n._v("译注：Ferris 是 Rust 的"),t("a",{attrs:{href:"http://www.rustacean.net/",target:"_blank",rel:"noopener noreferrer"}},[n._v("非官方吉祥物"),t("OutboundLink")],1),n._v("。")]),n._v(" "),t("ul",[t("li",[t("code",[n._v("into_iter")]),n._v(" - 会消耗集合。在每次迭代中，集合中的数据本身会被提供。一旦集合被消\n耗了，之后就无法再使用了，因为它已经在循环中被 “移除”（move）了。")])]),n._v(" "),t("div",{staticClass:"language-rust,editable extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('fn main() {\n    let names = vec!["Bob", "Frank", "Ferris"];\n\n    for name in names.into_iter() {\n        match name {\n            "Ferris" => println!("There is a rustacean among us!"),\n            _ => println!("Hello {}", name),\n        }\n    }\n}\n')])])]),t("ul",[t("li",[t("code",[n._v("iter_mut")]),n._v(" - 可变地（mutably）借用集合中的每个元素，从而允许集合被就地修改。")])]),n._v(" "),t("div",{staticClass:"language-rust,editable extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('fn main() {\n    let mut names = vec!["Bob", "Frank", "Ferris"];\n\n    for name in names.iter_mut() {\n        *name = match name {\n            &mut "Ferris" => "There is a rustacean among us!",\n            _ => "Hello",\n        }\n    }\n    println!("names: {:?}", names);\n}\n')])])]),t("p",[n._v("在上面这些代码中，注意 "),t("code",[n._v("match")]),n._v(" 的分支中所写的类型不同，这是不同迭代方式的关键\n区别。因为类型不同，能够执行的操作当然也不同。")]),n._v(" "),t("h3",{attrs:{id:"参见："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参见："}},[n._v("#")]),n._v(" 参见：")]),n._v(" "),t("p",[t("RouterLink",{attrs:{to:"/trait/iter.html"}},[n._v("Iterator")])],1)])}),[],!1,null,null,null);e.default=r.exports}}]);