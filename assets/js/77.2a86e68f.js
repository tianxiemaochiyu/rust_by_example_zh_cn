(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{555:function(t,e,n){"use strict";n.r(e);var r=n(4),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"iterator-any"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#iterator-any"}},[t._v("#")]),t._v(" Iterator::any")]),t._v(" "),n("p",[n("code",[t._v("Iterator::any")]),t._v(" 是一个函数，若传给它一个迭代器（iterator），当其中任一元素满足\n谓词（predicate）时它将返回 "),n("code",[t._v("true")]),t._v("，否则返回 "),n("code",[t._v("false")]),t._v("（译注：谓词是闭包规定\n的， "),n("code",[t._v("true")]),t._v("/"),n("code",[t._v("false")]),t._v(" 是闭包作用在元素上的返回值）。它的签名如下：")]),t._v(" "),n("div",{staticClass:"language-rust,ignore extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("pub trait Iterator {\n    // 被迭代的类型。\n    type Item;\n\n    // `any` 接受 `&mut self` 参数（译注：回想一下，这是 `self: &mut Self` 的简写）\n    // 表明函数的调用者可以被借用和修改，但不会被消耗。\n    fn any<F>(&mut self, f: F) -> bool where\n        // `FnMut` 表示被捕获的变量最多只能被修改，而不能被消耗。\n        // `Self::Item` 指明了被捕获变量的类型（译注：是迭代器的元素本身的类型）\n        F: FnMut(Self::Item) -> bool {}\n        \n        // 译注：原文说 `Self::Item` 表明变量是通过值传递给闭包的，这是说错了。\n        // `FnMut` 就表示闭包只能通过引用捕获变量。把类型为 `T` 的变量作为闭包\n        // 的参数不代表闭包会拿走它的值，也可能是拿走它的引用。\n}\n")])])]),n("div",{staticClass:"language-rust,editable extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('fn main() {\n    let vec1 = vec![1, 2, 3];\n    let vec2 = vec![4, 5, 6];\n\n    // 对 vec 的 `iter()` 举出 `&i32`。（通过用 `&x` 匹配）把它解构成 `i32`。\n    // 译注：注意 `any` 方法会自动地把 `vec.iter()` 举出的迭代器的元素一个个地\n    // 传给闭包。因此闭包接收到的参数是 `&i32` 类型的。\n    println!("2 in vec1: {}", vec1.iter()     .any(|&x| x == 2));\n    // 对 vec 的 `into_iter()` 举出 `i32` 类型。无需解构。\n    println!("2 in vec2: {}", vec2.into_iter().any(| x| x == 2));\n\n    let array1 = [1, 2, 3];\n    let array2 = [4, 5, 6];\n\n    // 对数组的 `iter()` 举出 `&i32`。\n    println!("2 in array1: {}", array1.iter()     .any(|&x| x == 2));\n    // 对数组的 `into_iter()` 通常举出 `&i32`。\n    println!("2 in array2: {}", array2.into_iter().any(|&x| x == 2));\n}\n')])])]),n("h3",{attrs:{id:"参见："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参见："}},[t._v("#")]),t._v(" 参见：")]),t._v(" "),n("p",[n("a",{attrs:{href:"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.any",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("std::iter::Iterator::any")]),n("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=a.exports}}]);