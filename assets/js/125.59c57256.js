(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{606:function(n,e,t){"use strict";t.r(e);var r=t(4),_=Object(r.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"字面量和运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字面量和运算符"}},[n._v("#")]),n._v(" 字面量和运算符")]),n._v(" "),t("p",[n._v("整数 "),t("code",[n._v("1")]),n._v("、浮点数 "),t("code",[n._v("1.2")]),n._v("、字符 "),t("code",[n._v("'a'")]),n._v("、字符串 "),t("code",[n._v('"abc"')]),n._v("、布尔值 "),t("code",[n._v("true")]),n._v(" 和单元类型\n"),t("code",[n._v("()")]),n._v(" 可以用数字、文字或符号之类的 “字面量”（literal）来表示。")]),n._v(" "),t("p",[n._v("另外，通过加前缀 "),t("code",[n._v("0x")]),n._v("、"),t("code",[n._v("0o")]),n._v("、"),t("code",[n._v("0b")]),n._v("，数字可以用十六进制、八进制或二进制记法表示。")]),n._v(" "),t("p",[n._v("为了改善可读性，可以在数值字面量中插入下划线，比如："),t("code",[n._v("1_000")]),n._v(" 等同于 "),t("code",[n._v("1000")]),n._v("，\n"),t("code",[n._v("0.000_001")]),n._v(" 等同于 "),t("code",[n._v("0.000001")]),n._v("。")]),n._v(" "),t("p",[n._v("我们需要把字面量的类型告诉编译器。如前面学过的，我们使用 "),t("code",[n._v("u32")]),n._v(" 后缀来表明字面量\n是一个 32 位无符号整数，"),t("code",[n._v("i32")]),n._v(" 后缀表明字面量是一个 32 位有符号整数。")]),n._v(" "),t("p",[t("a",{attrs:{href:"http://doc.rust-lang.org/reference.html#operator-precedence",target:"_blank",rel:"noopener noreferrer"}},[n._v("Rust"),t("OutboundLink")],1),n._v(" 提供了一系列的运算符（operator），它们的优先级\n和"),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Operator_precedence#Programming_languages",target:"_blank",rel:"noopener noreferrer"}},[n._v("类 C 语言"),t("OutboundLink")],1),n._v("的类似。（译注：类 C 语言包括 C/C++、Java、PHP 等语言。）")]),n._v(" "),t("div",{staticClass:"language-rust,editable extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('fn main() {\n    // 整数相加\n    println!("1 + 2 = {}", 1u32 + 2);\n\n    // 整数相减\n    println!("1 - 2 = {}", 1i32 - 2);\n    // 试一试 ^ 尝试将 `1i32` 改为 `1u32`，体会为什么类型声明这么重要\n\n    // 短路求值的布尔逻辑\n    println!("true AND false is {}", true && false);\n    println!("true OR false is {}", true || false);\n    println!("NOT true is {}", !true);\n\n    // 位运算\n    println!("0011 AND 0101 is {:04b}", 0b0011u32 & 0b0101);\n    println!("0011 OR 0101 is {:04b}", 0b0011u32 | 0b0101);\n    println!("0011 XOR 0101 is {:04b}", 0b0011u32 ^ 0b0101);\n    println!("1 << 5 is {}", 1u32 << 5);\n    println!("0x80 >> 2 is 0x{:x}", 0x80u32 >> 2);\n\n    // 使用下划线改善数字的可读性！\n    println!("One million is written as {}", 1_000_000u32);\n}\n')])])])])}),[],!1,null,null,null);e.default=_.exports}}]);