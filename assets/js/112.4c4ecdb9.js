(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{590:function(n,t,e){"use strict";e.r(t);var i=e(4),r=Object(i.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"重复"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重复"}},[n._v("#")]),n._v(" 重复")]),n._v(" "),e("p",[n._v("宏在参数列表中可以使用 "),e("code",[n._v("+")]),n._v(" 来表示一个参数可能出现一次或多次，使用 "),e("code",[n._v("*")]),n._v(" 来表示该\n参数可能出现零次或多次。")]),n._v(" "),e("p",[n._v("在下面例子中，把模式这样： "),e("code",[n._v("$(...),+")]),n._v(" 包围起来，就可以匹配一个或多个用逗号隔开\n的表达式。另外注意到，宏定义的最后一个分支可以不用分号作为结束。")]),n._v(" "),e("div",{staticClass:"language-rust,editable extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// `min!` 将求出任意数量的参数的最小值。\nmacro_rules! find_min {\n    // 基本情形：\n    ($x:expr) => ($x);\n    // `$x` 后面跟着至少一个 `$y,`\n    ($x:expr, $($y:expr),+) => (\n        // 对 `$x` 后面的 `$y` 们调用 `find_min!` \n        std::cmp::min($x, find_min!($($y),+))\n    )\n}\n\nfn main() {\n    println!("{}", find_min!(1u32));\n    println!("{}", find_min!(1u32 + 2 , 2u32));\n    println!("{}", find_min!(5u32, 2u32 * 3, 4u32));\n}\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);