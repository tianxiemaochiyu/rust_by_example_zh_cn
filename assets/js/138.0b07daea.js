(window.webpackJsonp=window.webpackJsonp||[]).push([[138],{617:function(t,n,s){"use strict";s.r(n);var i=s(4),e=Object(i.a)({},(function(){var t=this.$createElement,n=this._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"强制转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#强制转换"}},[this._v("#")]),this._v(" 强制转换")]),this._v(" "),n("p",[this._v("一个较长的生命周期可以强制转成一个较短的生命周期，使它在一个通常情况下不能工作\n的作用域内也能正常工作。强制转换可由编译器隐式地推导并执行，也可以通过声明不同\n的生命周期的形式实现。")]),this._v(" "),n("div",{staticClass:"language-rust,editable extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("// 在这里，Rust 推导了一个尽可能短的生命周期。\n// 然后这两个引用都被强制转成这个生命周期。\nfn multiply<'a>(first: &'a i32, second: &'a i32) -> i32 {\n    first * second\n}\n\n// `<'a: 'b, 'b>` 读作生命周期 `'a` 至少和 `'b` 一样长。\n// 在这里我们我们接受了一个 `&'a i32` 类型并返回一个 `&'b i32` 类型，这是\n// 强制转换得到的结果。\nfn choose_first<'a: 'b, 'b>(first: &'a i32, _: &'b i32) -> &'b i32 {\n    first\n}\n\nfn main() {\n    let first = 2; // 较长的生命周期\n    \n    {\n        let second = 3; // 较短的生命周期\n        \n        println!(\"The product is {}\", multiply(&first, &second));\n        println!(\"{} is the first\", choose_first(&first, &second));\n    };\n}\n")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);