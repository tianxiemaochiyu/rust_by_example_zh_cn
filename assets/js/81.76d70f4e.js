(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{561:function(t,n,e){"use strict";e.r(n);var r=e(4),a=Object(r.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"作为输出参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作为输出参数"}},[t._v("#")]),t._v(" 作为输出参数")]),t._v(" "),e("p",[t._v("闭包作为输入参数是可能的，所以返回闭包作为输出参数（output parameter）也应该是\n可能的。然而返回闭包类型会有问题，因为目前 Rust 只支持返回具体（非泛型）的\n类型。按照定义，匿名的闭包的类型是未知的，所以只有使用"),e("code",[t._v("impl Trait")]),t._v("才能返回一个闭包。")]),t._v(" "),e("p",[t._v("返回值的合法 trait 和前面的略有不同：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Fn")]),t._v("：和前面的一样")]),t._v(" "),e("li",[e("code",[t._v("FnMut")]),t._v("：和前面的一样")]),t._v(" "),e("li",[e("code",[t._v("FnOnce")]),t._v("：不平常的事情正是发生在这里。总之现在你需要返回 ["),e("code",[t._v("FnBox")]),t._v("][fnbox]\n类型，目前该类型还是不稳定的。这个情况估计将来会改进。")])]),t._v(" "),e("p",[t._v("除此之外，还必须使用 "),e("code",[t._v("move")]),t._v(" 关键字，它表明所有的捕获都是通过值进行的。这是必须\n的，因为在函数退出时，任何通过引用的捕获都被丢弃，在闭包中留下无效的引用。")]),t._v(" "),e("div",{staticClass:"language-rust,editable extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('fn create_fn() -> impl Fn() {\n    let text = "Fn".to_owned();\n\n    move || println!("This is a: {}", text)\n}\n\nfn create_fnmut() -> impl FnMut() {\n    let text = "FnMut".to_owned();\n\n    move || println!("This is a: {}", text)\n}\n\nfn main() {\n    let fn_plain = create_fn();\n    let mut fn_mut = create_fnmut();\n\n    fn_plain();\n    fn_mut();\n}\n\n')])])]),e("h3",{attrs:{id:"参见："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参见："}},[t._v("#")]),t._v(" 参见：")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://doc.rust-lang.org/std/ops/trait.Fn.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("Fn")]),e("OutboundLink")],1),t._v(", "),e("a",{attrs:{href:"https://doc.rust-lang.org/std/ops/trait.FnMut.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("FnMut")]),e("OutboundLink")],1),t._v(", "),e("RouterLink",{attrs:{to:"/generics.html"}},[t._v("泛型")]),t._v(" 和 "),e("RouterLink",{attrs:{to:"/trait/impl_trait.html"}},[t._v("impl Trait")]),t._v(".")],1)])}),[],!1,null,null,null);n.default=a.exports}}]);