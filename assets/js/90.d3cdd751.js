(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{569:function(t,r,e){"use strict";e.r(r);var n=e(4),a=Object(n.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"测试实例：空约束"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试实例：空约束"}},[t._v("#")]),t._v(" 测试实例：空约束")]),t._v(" "),e("p",[t._v("约束的工作机制会产生这样的效果：即使一个 "),e("code",[t._v("trait")]),t._v(" 不包含任何功能，你仍然可以用它\n作为约束。标准库中的 "),e("code",[t._v("Eq")]),t._v(" 和 "),e("code",[t._v("Ord")]),t._v(" 就是这样的 "),e("code",[t._v("trait")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-rust,editable extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('struct Cardinal;\nstruct BlueJay;\nstruct Turkey;\n\ntrait Red {}\ntrait Blue {}\n\nimpl Red for Cardinal {}\nimpl Blue for BlueJay {}\n\n// 这些函数只对实现了相应的 trait 的类型有效。\n// 事实上这些 trait 内部是空的，但这没有关系。\nfn red<T: Red>(_: &T)   -> &\'static str { "red" }\nfn blue<T: Blue>(_: &T) -> &\'static str { "blue" }\n\nfn main() {\n    let cardinal = Cardinal;\n    let blue_jay = BlueJay;\n    let _turkey   = Turkey;\n\n    // 由于约束，`red()` 不能作用于 blue_jay （蓝松鸟），反过来也一样。\n    println!("A cardinal is {}", red(&cardinal));\n    println!("A blue jay is {}", blue(&blue_jay));\n    //println!("A turkey is {}", red(&_turkey));\n    // ^ 试一试：去掉此行注释。\n}\n')])])]),e("h3",{attrs:{id:"参见："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参见："}},[t._v("#")]),t._v(" 参见：")]),t._v(" "),e("p",[e("a",{attrs:{href:"http://doc.rust-lang.org/std/cmp/trait.Eq.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("std::cmp::Eq")]),e("OutboundLink")],1),t._v(", "),e("a",{attrs:{href:"http://doc.rust-lang.org/std/cmp/trait.Ord.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("std::cmp::Ord")]),e("OutboundLink")],1),t._v(", 和 "),e("RouterLink",{attrs:{to:"/trait.html"}},[e("code",[t._v("trait")])])],1)])}),[],!1,null,null,null);r.default=a.exports}}]);