(window.webpackJsonp=window.webpackJsonp||[]).push([[178],{658:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"单元测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单元测试"}},[t._v("#")]),t._v(" 单元测试")]),t._v(" "),a("p",[t._v("测试（test）是这样一种 Rust 函数：它保证其他部分的代码按照所希望的行为正常\n运行。测试函数的函数体通常会进行一些配置，运行我们想要测试的代码，然后\n断言（assert）结果是不是我们所期望的。")]),t._v(" "),a("p",[t._v("大多数单元测试都会被放到一个叫 "),a("code",[t._v("tests")]),t._v(" 的、带有 "),a("code",[t._v("#[cfg(test)]")]),t._v(" 属性\n的"),a("RouterLink",{attrs:{to:"/mod.html"}},[t._v("模块")]),t._v("中，测试函数要加上 "),a("code",[t._v("#[test]")]),t._v(" 属性。")],1),t._v(" "),a("p",[t._v("当测试函数中有什么东西 "),a("RouterLink",{attrs:{to:"/std/panic.html"}},[t._v("panic")]),t._v(" 了，测试就失败。有一些这方面的\n辅助"),a("RouterLink",{attrs:{to:"/macros.html"}},[t._v("宏")]),t._v("：")],1),t._v(" "),a("ul",[a("li",[a("code",[t._v("assert!(expression)")]),t._v(" - 如果表达式的值是 "),a("code",[t._v("false")]),t._v(" 则 panic。")]),t._v(" "),a("li",[a("code",[t._v("assert_eq!(left, right)")]),t._v(" 和 "),a("code",[t._v("assert_ne!(left, right)")]),t._v(" - 检验左右两边是否\n相等/不等。")])]),t._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pub fn add(a: i32, b: i32) -> i32 {\n    a + b\n}\n\n// 这个加法函数写得很差，本例中我们会使它失败。\n#[allow(dead_code)]\nfn bad_add(a: i32, b: i32) -> i32 {\n    a - b\n}\n\n#[cfg(test)]\nmod tests {\n    // 注意这个惯用法：在 tests 模块中，从外部作用域导入所有名字。\n    use super::*;\n\n    #[test]\n    fn test_add() {\n        assert_eq!(add(1, 2), 3);\n    }\n\n    #[test]\n    fn test_bad_add() {\n        // 这个断言会导致测试失败。注意私有的函数也可以被测试！\n        assert_eq!(bad_add(1, 2), 3);\n    }\n}\n")])])]),a("p",[t._v("可以使用 "),a("code",[t._v("cargo test")]),t._v(" 来运行测试。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ cargo "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n\nrunning "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" tests\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" tests::test_bad_add "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". FAILED\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" tests::test_add "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". ok\n\nfailures:\n\n---- tests::test_bad_add stdout ----\n        thread "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tests::test_bad_add'")]),t._v(" panicked at "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'assertion failed: "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n  left: "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("-1"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(",\n right: "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("'")]),t._v(", src/lib.rs:21:8\nnote: Run with "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("RUST_BACKTRACE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" a backtrace.\n\n\nfailures:\n    tests::test_bad_add\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" result: FAILED. "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" passed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" failed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" ignored"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" measured"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" filtered out\n")])])]),a("h2",{attrs:{id:"测试-panic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试-panic"}},[t._v("#")]),t._v(" 测试 panic")]),t._v(" "),a("p",[t._v("一些函数应当在特定条件下 panic。为测试这种行为，请使用 "),a("code",[t._v("#[should_panic]")]),t._v(" 属性。这\n个属性接受可选参数 "),a("code",[t._v("expected =")]),t._v(" 以指定 panic 时的消息。如果你的函数能以多种方式\npanic，这个属性就保证了你在测试的确实是所指定的 panic。")]),t._v(" "),a("div",{staticClass:"language-rust,ignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('pub fn divide_non_zero_result(a: u32, b: u32) -> u32 {\n    if b == 0 {\n        panic!("Divide-by-zero error");\n    } else if a < b {\n        panic!("Divide result is zero");\n    }\n    a / b\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_divide() {\n        assert_eq!(divide_non_zero_result(10, 2), 5);\n    }\n\n    #[test]\n    #[should_panic]\n    fn test_any_panic() {\n        divide_non_zero_result(1, 0);\n    }\n\n    #[test]\n    #[should_panic(expected = "Divide result is zero")]\n    fn test_specific_panic() {\n        divide_non_zero_result(1, 10);\n    }\n}\n')])])]),a("p",[t._v("运行这些测试会输出：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ cargo "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n\nrunning "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" tests\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" tests::test_any_panic "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". ok\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" tests::test_divide "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". ok\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" tests::test_specific_panic "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". ok\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" result: ok. "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" passed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" failed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" ignored"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" measured"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" filtered out\n\n   Doc-tests tmp-test-should-panic\n\nrunning "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" tests\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" result: ok. "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" passed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" failed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" ignored"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" measured"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" filtered out\n")])])]),a("h2",{attrs:{id:"运行特定的测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行特定的测试"}},[t._v("#")]),t._v(" 运行特定的测试")]),t._v(" "),a("p",[t._v("要运行特定的测试，只要把测试名称传给 "),a("code",[t._v("cargo test")]),t._v(" 命令就可以了。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ cargo "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" test_any_panic\nrunning "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" tests::test_any_panic "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". ok\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" result: ok. "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" passed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" failed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" ignored"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" measured"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" filtered out\n\n   Doc-tests tmp-test-should-panic\n\nrunning "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" tests\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" result: ok. "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" passed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" failed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" ignored"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" measured"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" filtered out\n")])])]),a("p",[t._v("要运行多个测试，可以仅指定测试名称中的一部分，用它来匹配所有要运行的测试。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ cargo "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" panic\nrunning "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" tests\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" tests::test_any_panic "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". ok\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" tests::test_specific_panic "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". ok\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" result: ok. "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" passed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" failed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" ignored"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" measured"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" filtered out\n\n   Doc-tests tmp-test-should-panic\n\nrunning "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" tests\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" result: ok. "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" passed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" failed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" ignored"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" measured"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" filtered out\n")])])]),a("h2",{attrs:{id:"忽略测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#忽略测试"}},[t._v("#")]),t._v(" 忽略测试")]),t._v(" "),a("p",[t._v("可以把属性 "),a("code",[t._v("#[ignore]")]),t._v(" 赋予测试以排除某些测试，或者使用 "),a("code",[t._v("cargo test -- --ignored")]),t._v("\n命令来运行它们。")]),t._v(" "),a("div",{staticClass:"language-rust extra-class"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[cfg(test)]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("tests")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("test_add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("assert_eq!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("test_add_hundred")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("assert_eq!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("102")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("assert_eq!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("102")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[ignore]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("ignored_test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("assert_eq!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ cargo "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\nrunning "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" tests::ignored_test "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". ignored\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" result: ok. "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" passed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" failed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" ignored"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" measured"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" filtered out\n\n   Doc-tests tmp-ignore\n\nrunning "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" tests\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" result: ok. "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" passed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" failed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" ignored"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" measured"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" filtered out\n\n$ cargo "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" -- --ignored\nrunning "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" tests::ignored_test "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". ok\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" result: ok. "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" passed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" failed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" ignored"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" measured"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" filtered out\n\n   Doc-tests tmp-ignore\n\nrunning "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" tests\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" result: ok. "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" passed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" failed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" ignored"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" measured"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" filtered out\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);