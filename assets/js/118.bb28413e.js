(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{599:function(a,s,n){"use strict";n.r(s);var t=n(4),e=Object(t.a)({},(function(){var a=this,s=a.$createElement,n=a._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"文件分层"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#文件分层"}},[a._v("#")]),a._v(" 文件分层")]),a._v(" "),n("p",[a._v("模块可以分配到文件/目录的层次结构中。让我们将《可见性》一节中\n的"),n("RouterLink",{attrs:{to:"/mod/visibility.html"}},[a._v("例子")]),a._v("的代码拆分到多个文件中：")],1),a._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[a._v("$ tree "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("-- my\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("   "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("-- inaccessible.rs\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("   "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("-- mod.rs\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("   "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("-- nested.rs\n"),n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("-- split.rs\n")])])]),n("p",[n("code",[a._v("split.rs")]),a._v(" 的内容：")]),a._v(" "),n("div",{staticClass:"language-rust,ignore extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('// 此声明将会查找名为 `my.rs` 或 `my/mod.rs` 的文件，并将该文件的内容放到\n// 此作用域中一个名为 `my` 的模块里面。\nmod my;\n\nfn function() {\n    println!("called `function()`");\n}\n\nfn main() {\n    my::function();\n\n    function();\n\n    my::indirect_access();\n\n    my::nested::function();\n}\n')])])]),n("p",[n("code",[a._v("my/mod.rs")]),a._v(" 的内容：")]),a._v(" "),n("div",{staticClass:"language-rust,ignore extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('// 类似地，`mod inaccessible` 和 `mod nested` 将找到 `nested.rs` 和\n// `inaccessible.rs` 文件，并在它们放到各自的模块中。\nmod inaccessible;\npub mod nested;\n\npub fn function() {\n    println!("called `my::function()`");\n}\n\nfn private_function() {\n    println!("called `my::private_function()`");\n}\n\npub fn indirect_access() {\n    print!("called `my::indirect_access()`, that\\n> ");\n\n    private_function();\n}\n')])])]),n("p",[n("code",[a._v("my/nested.rs")]),a._v(" 的内容：")]),a._v(" "),n("div",{staticClass:"language-rust,ignore extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('pub fn function() {\n    println!("called `my::nested::function()`");\n}\n\n#[allow(dead_code)]\nfn private_function() {\n    println!("called `my::nested::private_function()`");\n}\n')])])]),n("p",[n("code",[a._v("my/inaccessible.rs")]),a._v(" 的内容：")]),a._v(" "),n("div",{staticClass:"language-rust,ignore extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('#[allow(dead_code)]\npub fn public_function() {\n    println!("called `my::inaccessible::public_function()`");\n}\n')])])]),n("p",[a._v("我们看到代码仍然正常运行，就和前面的一样：")]),a._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[a._v("$ rustc split.rs "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" ./split\ncalled "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("my::function"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\ncalled "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("function"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\ncalled "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("my::indirect_access"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(", that\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" called "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("my::private_function"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\ncalled "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("my::nested::function"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);