(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{536:function(n,e,t){"use strict";t.r(e);var s=t(4),i=Object(s.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"if-else"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if-else"}},[n._v("#")]),n._v(" "),t("code",[n._v("if/else")])]),n._v(" "),t("p",[t("code",[n._v("if")]),n._v("-"),t("code",[n._v("else")]),n._v(" 分支判断和其他语言类似。与很多语言不同的是，Rust 语言中的布尔判断条件\n不必用小括号包住，且每个条件后面都跟着一个代码块。"),t("code",[n._v("if")]),n._v("-"),t("code",[n._v("else")]),n._v(" 条件选择是一个表达\n式，并且所有分支都必须返回相同的类型。")]),n._v(" "),t("div",{staticClass:"language-rust,editable extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('fn main() {\n    let n = 5;\n\n    if n < 0 {\n        print!("{} is negative", n);\n    } else if n > 0 {\n        print!("{} is positive", n);\n    } else {\n        print!("{} is zero", n);\n    }\n\n    let big_n =\n        if n < 10 && n > -10 {\n            println!(", and is a small number, increase ten-fold");\n\n            // 这个表达式返回一个 `i32` 类型。\n            10 * n\n        } else {\n            println!(", and is a big number, half the number");\n\n            // 这个表达式也必须返回一个 `i32` 类型。\n            n / 2\n            // 试一试 ^ 试着加上一个分号来结束这条表达式。\n        };\n    //   ^ 不要忘记在这里加上一个分号！所有的 `let` 绑定都需要它。\n\n    println!("{} -> {}", n, big_n);\n}\n')])])])])}),[],!1,null,null,null);e.default=i.exports}}]);